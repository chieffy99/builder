# คู่มือการใช้งานระบบ Anti-Normalization ด้วยข้อมูล Superstore
การนำชุดข้อมูล **Superstore dataset** เป็นตัวอย่างในการใช้งานรูปแบบนึงเท่านั้น

## แนวคิดของการฝังตรรกะในสตริง (Anti-Normalization)

**Anti-Normalization** คือแนวคิดในการจัดเก็บข้อมูลที่แตกต่างจากฐานข้อมูลแบบดั้งเดิมที่มีการทำ *Normalization* (การแยกข้อมูลออกหลายตารางตามชนิดข้อมูลและเชื่อมด้วยคีย์). ในระบบ Anti-Normalization เราจะเก็บเหตุการณ์ธุรกิจแต่ละรายการเป็น **สตริงข้อความเพียงบรรทัดเดียว** ที่บรรจุข้อมูลทุกอย่างที่เกี่ยวข้องและตรรกะการตีความไว้ภายในตัวมันเอง. กล่าวคือ สตริงแต่ละบรรทัดทำหน้าที่เสมือน “ประโยคพฤติกรรม” ที่อธิบายเหตุการณ์นั้นครบถ้วนในตัว เช่น ใคร (ลูกค้าหรือพนักงาน), ทำอะไร (ซื้อสินค้า, จัดส่ง), รายละเอียดต่างๆ และผลลัพธ์ทางธุรกิจ. การฝังตรรกะลงในสตริงเช่นนี้ทำให้ข้อมูล**พึ่งพาตัวเอง** (self-describing) ไม่ต้องอาศัยสคีมาและการjoinตารางหลายๆ ครั้งเพื่อรวบรวมความหมายของเหตุการณ์หนึ่งๆ อีกต่อไป.

เปรียบเทียบกับระบบดั้งเดิม: การจะเข้าใจธุรกรรมการขายหนึ่งครั้ง ในระบบฐานข้อมูลปกติอาจต้องดูหลายตาราง (เช่น ตารางการขาย, ตารางลูกค้า, ตารางสินค้า, ตารางการชำระเงิน) และใช้การเชื่อมโยง (JOIN) เพื่อประกอบเรื่องราวทั้งหมดเข้าด้วยกัน ซึ่งยุ่งยากและมีโอกาสผิดพลาดสูง. แต่ด้วยแนวคิด Anti-Normalization ข้อมูลการขาย, ลูกค้า, สินค้า ฯลฯ ที่เกี่ยวข้องจะถูกรวมอยู่ในบรรทัดเดียวอย่างมีโครงสร้าง ทำให้แต่ละรายการเหตุการณ์มี **บริบทครบถ้วนในตัวเอง** ตั้งแต่ต้นทาง. วิธีนี้ช่วยลดความซับซ้อนในการสอบถามหรือสรุปผลลัพธ์ทางธุรกิจ เพราะทุกสิ่งที่ต้องการอยู่ในสตริงเดียว (data **carry its own schema** และกฎการแปลความภายในตัวมันเอง). นอกจากนี้ การที่ข้อมูลถูกบันทึกด้วยตรรกะตั้งแต่ต้นยังช่วยลดความจำเป็นในการปรับโครงสร้างหรือทำความสะอาดข้อมูลย้อนหลัง เนื่องจากข้อมูลทุกชิ้นถูกจับใส่ในรูปแบบที่มีความหมายตั้งแต่ตอนบันทึกเข้า (แนวคิด “behavior-before-schema” หรือให้พฤติกรรมมาก่อนโครงสร้างฐานข้อมูล).

## โครงสร้างสตริงข้อมูลในระบบ Anti-Normalization

ระบบ Anti-Normalization กำหนดรูปแบบสตริงที่แน่นอนให้กับ**ทุกๆ บรรทัดข้อมูล** โดยแต่ละบรรทัดจะประกอบด้วยฟิลด์ทั้งหมด 12 ฟิลด์ คั่นด้วยเครื่องหมายจุลภาค (`,`). โครงสร้างทั่วไปคือ:

* **Field1:** Date (วันที่ของรายการนั้น)
* **Field2:** ID1 (รหัสข้อมูลส่วนที่ 1 เช่น รหัสย่อระบุเอนทิตีหลักหรือผู้เกี่ยวข้อง)
* **Field3:** ID2 (รหัสข้อมูลส่วนที่ 2 เช่น รหัสเต็มของเอนทิตีหรือรหัสการกระทำ)
* **Field4:** StatN (สถานะเชิงตัวเลข เช่น 0 หมายถึงสถานะปกติ)
* **Field5:** StatC (สถานะเชิงรหัสตัวอักษร ระบุประเภทของรายการ เช่น `C` = Catalog/ข้อมูลอ้างอิง, `B` = Business Event/ธุรกรรม)
* **Field6-12:** Slot1–Slot7 (สล็อตข้อมูลที่เหลือสำหรับบรรจุรายละเอียดตามประเภทของรายการนั้นๆ)

ด้วยโครงสร้างเหล่านี้ แต่ละประเภทข้อมูล (ลูกค้า, สินค้า, การขนส่ง, การขาย ฯลฯ) จะใช้ความหมายของฟิลด์แตกต่างกันไปตามบริบท โดยใช้ StatC แยกแยะประเภท และกำหนดความหมายของ Slot แต่ละช่องตามประเภทนั้น. ระบบ Anti-Normalization ที่ใช้ชุดข้อมูล Superstore สามารถแบ่งประเภทสตริงหลักๆ ได้ดังนี้:

### ข้อมูลลูกค้า (Customer Data Record)

**รูปแบบ:** `Date, [CID (รหัสลูกค้าแบบย่อ)], CID, 0, C, CN, Segment, Country, City, State, Postal Code, Region`

* **ความหมาย:** บรรทัดข้อมูลลูกค้าจะใช้ StatC = `C` (Catalog) เพื่อบ่งชี้ว่าเป็นข้อมูลอ้างอิง (reference data). Field2 เป็นรหัสลูกค้าแบบย่อในวงเล็บ (`[CID]` ซึ่งเราสร้างขึ้นเพื่อให้สั้นและเป็นเอกลักษณ์), Field3 เป็น Customer ID จริงตามระบบเดิม, และ Slots ต่างๆ (Field6 เป็นต้นไป) บรรจุข้อมูลคุณสมบัติของลูกค้ารายนั้น เช่น ชื่อลูกค้า (CN), ประเภทลูกค้า (Segment), ประเทศ, เมือง, รัฐ/จังหวัด, รหัสไปรษณีย์ และภูมิภาค ตามลำดับจากชุดข้อมูล Superstore เดิม. ค่า StatN = `0` แสดงว่านี่คือระเบียนปกติ (ไม่ได้ยกเลิกหรือแก้ไข).

*ตัวอย่าง:* ข้อมูลลูกค้า **Claire Gute** จาก Superstore (Customer ID = CG-12520, Segment = Consumer, เมือง Henderson ฯลฯ) เราสร้างรหัสย่อลูกค้าเป็น `[C001]`. บรรทัดลูกค้าจะถูกบันทึกดังนี้:

```
11/8/2016,C001,CG-12520,0,C,Claire Gute,Consumer,United States,Henderson,Kentucky,42420,South
```

บรรทัดนี้หมายถึง เมื่อวันที่ 11/8/2016 เพิ่มข้อมูลลูกค้ารหัสย่อ C001 ซึ่งคือลูกค้า CG-12520 (Claire Gute) มีสถานะปกติ (0) ประเภทข้อมูล Catalog (C) และมีรายละเอียด segment = Consumer, Country = United States, City = Henderson, State = Kentucky, Zip = 42420, Region = South ครบถ้วนในบรรทัดเดียว.

### ข้อมูลสินค้า (Product Data Record)

**รูปแบบ:** `Date, [PID (รหัสสินค้าแบบย่อ)], PID, 0, C, PN, Category, Sub-Category, Sales, Cost, 0, 0`

* **ความหมาย:** บรรทัดข้อมูลสินค้าก็ใช้ StatC = `C` (Catalog) เช่นกัน เพื่อระบุว่าเป็นข้อมูลอ้างอิงของสินค้า. Field2 คือรหัสสินค้าแบบย่อ (`[PID]` ที่เรากำหนดขึ้นเอง), Field3 คือ Product ID จริงตามระบบ (เช่นรหัสสินค้าจาก Superstore), และ Slots ที่เหลือเก็บรายละเอียดสินค้า ได้แก่ ชื่อสินค้า (PN), ประเภทหลัก (Category), ประเภทย่อย (Sub-Category), **ราคา** หรือมูลค่าขายต่อหน่วย (บรรจุในฟิลด์ Sales ของบรรทัดนี้), **ทุน** หรือมูลค่าต้นทุนสินค้าต่อหน่วย (บรรจุในฟิลด์ Cost ของบรรทัดนี้), และช่องที่เหลือที่ไม่ได้ใช้ให้ใส่ `0` เติมจนครบ 12 ฟิลด์. เช่นเดียวกับลูกค้า เราใส่ StatN = `0` และ StatC = `C` เพื่อบอกว่าเป็นระเบียนข้อมูลสินค้า (ไม่ใช่ธุรกรรม).

*ตัวอย่าง:* สินค้า “Bush Somerset Collection Bookcase” (รหัสสินค้า FUR-BO-10001798) จาก Superstore จัดอยู่ใน Category = Furniture, Sub-Category = Bookcases. สมมติเรากำหนดรหัสย่อสินค้าเป็น `[P001]` และจากข้อมูลการขายพบว่าหนังสือวางจำหน่ายนี้มีราคาต่อหน่วยประมาณ **130.98** (เพราะในออเดอร์หนึ่ง ขาย 2 ชิ้นรวม \$261.96).และต้นทุนที่หาจากราคา - profit บรรทัดข้อมูลสินค้าจะถูกสร้างดังนี้:

```
11/8/2016,P001,FUR-BO-10001798,0,C,Bush Somerset Collection Bookcase,Furniture,Bookcases,130.98,110.02,0,0
```

บรรทัดนี้หมายถึง เมื่อวันที่ 11/8/2016 เพิ่มข้อมูลสินค้ารหัสย่อ P001 แทนสินค้า FUR-BO-10001798 (Bush Somerset Collection Bookcase) สถานะปกติ, ประเภท Catalog (C), มีชื่อสินค้า, จัดอยู่ใน Furniture > Bookcases, และกำหนดราคาต่อหน่วยไว้ที่ \$130.98 (ช่อง Sales) ส่วนช่องท้ายๆ ที่ไม่ใช้ถูกเติมด้วย 0.

> **หมายเหตุ:** ในชุดข้อมูล Superstore จริง *ไม่มีราคาขายต่อหน่วยและต้นทุนโดยตรง* — มีแต่ยอดขายต่อรายการ (Sales) กับจำนวน (Quantity). ในที่นี้เราใช้วิธีคำนวณกลับเพื่อใช้เป็นข้อมูลอ้างอิงราคาสินค้าแต่ละชิ้นในระบบตัวอย่าง. 

### ข้อมูลการขนส่ง (Shipment Record)

**รูปแบบ:** `Date, OID, PID, 0, B, Shipment details...`

* **ความหมาย:** บรรทัดการขนส่งสินค้า (StatC = `B` หมายถึง Business Event) จะแทนการดำเนินการจัดส่งสินค้าของออเดอร์หนึ่งๆ โดย Field2 คือ Order ID (OID) ของคำสั่งซื้อ, Field3 คือรหัสสินค้า (PID) ที่ถูกจัดส่งในครั้งนั้น, ตามด้วย StatN = `0` (สถานะปกติ) และ StatC = `B` (ธุรกรรม). ส่วน Slots ที่เหลือ (Field6 เป็นต้นไป) ใช้บันทึกรายละเอียดการขนส่ง เช่น **จำนวนที่ส่ง** (slot1), **สถานะการจัดส่ง** (slot2), **วิธีการจัดส่ง/หมายเหตุ** (slot3) และหากมีข้อมูลเพิ่มเติมก็ใส่ต่อใน slot4-7 หรือหากไม่มีให้เติม 0 จนครบ 7 ช่อง. แต่ละสินค้าที่จัดส่งในออเดอร์จะมีบรรทัดการขนส่งของตัวเอง (เพื่อระบุสถานะแยกกันได้ในกรณีส่งของบางชิ้นก่อน/หลัง).

*ตัวอย่าง:* จากคำสั่งซื้อของลูกค้า C001 ข้างต้น (Order ID: CA-2016-152156) ที่มีสินค้าสองชิ้นคือ P001 และ P002, มีการจัดส่งในวันที่ 11/11/2016 ผ่าน **Second Class** (ตามข้อมูล Ship Date และ Ship Mode ของ Superstore). สมมติสถานะการจัดส่งคือ “Shipped” (ส่งแล้ว). สำหรับสินค้าชิ้นแรก P001 จำนวน 2 ชิ้น จะบันทึกบรรทัดการขนส่งดังนี้:

```
11/11/2016,CA-2016-152156,P001,0,B,2,Shipped,Second Class,0,0,0,0
```

บรรทัดนี้หมายถึง วันที่ 11/11/2016 มีการจัดส่งสินค้าในคำสั่งซื้อ CA-2016-152156 จำนวน 2 หน่วยของสินค้ารหัส P001 โดยสถานะการจัดส่งคือ Shipped และจัดส่งด้วยวิธี Second Class. (ช่องที่เหลือไม่ได้ใช้ถูกเติม 0) หากสินค้ารายการนั้นมีหลายชิ้นหลายประเภท ก็จะมีบรรทัดการขนส่งอีกหนึ่งบรรทัดสำหรับ P002 ในคำสั่งซื้อเดียวกัน (เช่น P002 จำนวน 3 ชิ้น ส่งวันที่เดียวกัน รายละเอียดการขนส่งเหมือนกัน).

### ข้อมูลการขาย (Sales Transaction Record)

**รูปแบบ:** `Date, CID, BY, 0, B, PID1, Num1, PID2, Num2, ..., PIDn, Numn,0,0`

* **ความหมาย:** บรรทัดธุรกรรมการขาย (StatC = `B`) จะบันทึกการที่ลูกค้ารายหนึ่งซื้อสินค้าหลายอย่างในคำสั่งซื้อ/เหตุการณ์เดียว. Field2 คือ Customer ID ของผู้ซื้อ (ในที่นี้ใช้รหัสย่อลูกค้า CID จากข้อมูลลูกค้า), Field3 คือรหัสการกระทำหรือคู่กรณี ซึ่งกำหนดเป็น `BY` เพื่อระบุว่าเหตุการณ์นี้คือ **การซื้อ (Buy)** ของลูกค้าคนนั้น, ตามด้วย StatN = `0` (ปกติ) และ StatC = `B` (Business Event). จากนั้น Slots ที่เหลือ (7 ช่อง) จะถูกใช้เป็นรายการสินค้าและจำนวนที่ซื้อ โดยใช้รูปแบบ **สลับช่องคี่-ช่องคู่** ดังนี้: *ช่องคี่* จะใส่ **รหัสสินค้า (PID)** และ *ช่องคู่ถัดมา* ใส่ **จำนวนที่ซื้อ (Num)** ของสินค้านั้น. หากมีสินค้าหลายรายการก็เรียงต่อเนื่องกันไปภายในบรรทัดเดียว (ในที่นี้ต้นแบบเดิมทีมีไว้ที่ 7 slot หากเกินกว่านั้นสามารถปรับเพิ่มจำนวนสล็อตได้). กรณีมีสล็อตเหลือที่ไม่ถูกใช้งาน (เนื่องจากจำนวนสินค้าน้อยกว่าสล็อตที่มี) ให้ใส่ค่า `0` ในช่องที่เหลือเพื่อให้ครบ 12 ฟิลด์ตามโครงสร้างที่กำหนดไว้.

* **การเชื่อมโยงราคาสินค้า:** ระบบ Anti-Normalization โครงสร้างที่ใช้นี้จะไม่เก็บยอดเงินรวมอยู่โดยตรงในบรรทัดการขาย แต่จะอาศัยการ **ดึงราคาสินค้าจากบรรทัดข้อมูลสินค้า** (Product Data Record) แทน. กล่าวคือ ราคาต่อหน่วยของแต่ละสินค้าอยู่ในช่อง Sales ของบรรทัดสินค้า ดังนั้นเมื่อต้องการคำนวณยอดขายหรือวิเคราะห์ข้อมูล เราสามารถนำรหัสสินค้า (PID) จากบรรทัดการขายไปค้นหาราคาที่ช่องนั้นในบรรทัดสินค้า แล้วคูณกับจำนวน (Num) ที่ซื้อเพื่อได้ยอดของแต่ละรายการ ก่อนจะรวมยอดทั้งหมดได้โดยตรง *โดยไม่ต้องอ้างอิงตารางภายนอกหรือทำ JOIN แบบระบบเดิม* – เพราะทุกอย่างอยู่ในข้อมูลอินพุตของเราแล้วตามหลักการ Anti-Normalization แต่สามารถปรับโครงสร้างให้เหมาะสมกับธุรกิจต่างๆได้

*ตัวอย่าง:* ลูกค้า **C001 (Claire Gute)** ทำการสั่งซื้อเมื่อวันที่ 11/8/2016 โดยซื้อสินค้า 2 รายการ ได้แก่ **P001 จำนวน 2 ชิ้น** และ **P002 จำนวน 3 ชิ้น** (P002 สมมติคือสินค้า “Hon Deluxe Chair” ที่มีราคาต่อหน่วย \$243.98 จากการคำนวณข้อมูลยอดขาย 3 ชิ้น \$731.94 ในชุดข้อมูล). บรรทัดธุรกรรมการขายจะถูกบันทึกดังนี้:

```
11/8/2016,C001,BY,0,B,P001,2,P002,3,0,0,0
```

ข้อความนี้อธิบายว่า วันที่ 11/8/2016 ลูกค้ารหัส C001 ได้ซื้อสินค้า (BY ย่อมาจาก Buy) สองรายการ ได้แก่ สินค้า P001 จำนวน 2 หน่วย และสินค้า P002 จำนวน 3 หน่วย. ช่องท้ายสุดสามช่องเป็น `0` เนื่องจากไม่มีสินค้ารายการที่สาม (เราจึงใส่ 0 เพื่อให้ครบ 12 ฟิลด์). จากบรรทัดนี้ หากต้องการทราบรายละเอียดเพิ่มเติม เช่น ชื่อสินค้าหรือหมวดหมู่ ก็สามารถไล่ดูบรรทัดข้อมูลสินค้าที่ P001 และ P002 เพื่อดึงชื่อสินค้าและหมวดหมู่มาได้ทันที หรือจะดูข้อมูลลูกค้า C001 เพื่อทราบว่าเป็นลูกค้ากลุ่มใด อยู่ที่ไหน ก็ทำได้ทันทีโดยค้นหาบรรทัดลูกค้า C001 – **ทุกอย่างเชื่อมโยงกันผ่านรหัสย่อที่กำหนดไว้ในสตริง** โดยไม่ต้องใช้ Foreign Key และการ JOIN แบบเดิม

> **สรุปโครงสร้าง:** ทั้งสี่ประเภทข้อมูลข้างต้น (ลูกค้า, สินค้า, การขนส่ง, การขาย) ต่างก็อยู่ร่วมกันในแหล่งข้อมูลรูปแบบสตริงเดียวกัน แต่สามารถจำแนกและเชื่อมโยงถึงกันได้ด้วยการออกแบบรหัส (ID1, ID2) ที่มีความหมาย (เช่นมี Prefix C, P, ฯลฯ) และการใช้ StatC ที่บอกชนิดข้อมูล. แนวทางนี้คล้ายการใช้รหัสนำหน้าเพื่อป้องกันการชนกันของคีย์และเพิ่มความหมายในตัว (เช่น C สำหรับลูกค้า, P สำหรับสินค้า, BY สำหรับการซื้อ) ทำให้เมื่อเราดูสตริงก็พอจะตีความได้ทันทีว่าบรรทัดนั้นเกี่ยวกับอะไรและเชื่อมกับข้อมูลใดบ้าง.

## การเตรียมข้อมูลแบบ Reference Row จากชุดข้อมูล Superstore
การ “ข้อมูลอ้างอิง” และ “ข้อมูลเหตุการณ์” ในรูปแบบสตริงตามที่ได้อธิบายไว้ข้างต้นโดยทั่วไปแล้วในข้อมูลทางธุรกิจเราสามารถแบ่งออกได้หลากหลายรูปแบบ ผู้เขียนใช้การจัดประเภทด้วยพฤติกรรมของข้อมูล ในที่นี้คือกิจกรรมที่เกิดขึ้นจริงของธุรกิจมาประยุกติ์ใช้
ซึ่งกระบวนการทำได้ดังนี้:

1. **เตรียมข้อมูลลูกค้า:** รวบรวมรายชื่อลูกค้าทั้งหมดจากชุดข้อมูล Superstore และกำหนดรหัสลูกค้าแบบย่อให้แต่ละราย (เช่น C001, C002, ... ตามลำดับหรือตามความเหมาะสม เพื่อให้ไม่ซ้ำกัน). จากนั้นสร้างบรรทัดข้อมูลลูกค้าตามรูปแบบ *Customer Data Record* สำหรับลูกค้าแต่ละคน โดยดึงข้อมูล **Customer ID, Customer Name, Segment, Country, City, State, Postal Code, Region** จากชุดข้อมูลเดิมมาใส่ให้ครบในช่องที่กำหนด และเติม `0, C` ในฟิลด์ที่ 4-5 เพื่อระบุสถานะและประเภทเป็นข้อมูลอ้างอิง. **วันที่ (Date)** อาจกำหนดเป็นวันที่เริ่มต้นที่เราบันทึกข้อมูลนี้ลงระบบ (เช่นใช้วันที่ของออเดอร์แรกที่ลูกค้าซื้อสินค้าครั้งแรก หรือวันที่นำเข้าข้อมูล). ตัวอย่างเช่น ลูกค้าแรก *Claire Gute* มีรหัสย่อ C001 ดังที่แสดงข้างต้น. เมื่อทำซ้ำขั้นตอนนี้ เราจะได้บรรทัดข้อมูลลูกค้าครบทุกคนไว้เป็น **ตารางอ้างอิงลูกค้า** (แต่ละบรรทัด self-contained ไม่จำเป็นต้องมีตารางแยกต่างหากจริงๆ ในทางปฏิบัติ เพราะเราสามารถจัดเก็บรวมในไฟล์เดียวกับธุรกรรมก็ได้ แต่การมองเป็นหมวดหมู่ช่วยให้เข้าใจง่ายขึ้น).

2. **เตรียมข้อมูลสินค้า:** เช่นเดียวกับลูกค้า รวบรวมรายการสินค้าทั้งหมดที่มีในชุดข้อมูล Superstore (อาจใช้ Product ID เป็นตัวระบุความแตกต่างของสินค้า) แล้วกำหนดรหัสย่อสินค้าให้แต่ละชนิด (เช่น P001, P002, ... ตามจำนวนสินค้า). สร้างบรรทัดข้อมูลสินค้าสำหรับสินค้าทุกตัวตามรูปแบบ *Product Data Record* โดยใส่ **Product ID, Product Name, Category, Sub-Category** และกำหนด **ราคาต่อหน่วยและต้นทุน** ลงในช่อง Sales กับ Cost ของบรรทัดนั้น. กรอกข้อมูลจนครบฟิลด์และเติม 0 ในช่องที่ไม่ได้ใช้ (slot ที่ 10-12). ผลลัพธ์จะได้ **ตารางอ้างอิงสินค้า** ในรูปสตริง พร้อมใช้งานอ้างถึงในธุรกรรมต่างๆ.

3. **เตรียมข้อมูลการขาย (ธุรกรรมการซื้อ):** สำหรับแต่ละคำสั่งซื้อ (Order) ในชุดข้อมูล Superstore ให้สร้างบรรทัดธุรกรรมการขายหนึ่งบรรทัดตามรูปแบบ *Sales Transaction Record*. เราจะใช้ข้อมูลดังนี้:

   * **วันที่ (Date):** ใช้ Order Date ของคำสั่งซื้อ.
   * **CID:** ระบุรหัสย่อลูกค้า (จากขั้นตอนที่ 1) ที่ตรงกับ Customer ID ของคำสั่งซื้อนั้น.
   * **รหัสการกระทำ (ID2):** ใช้คำว่า `BY` เพื่อบอกว่านี่คือเหตุการณ์การซื้อโดยลูกค้าคนนั้น.
   * **StatN, StatC:** ใส่ `0, B` เสมอ (แสดงสถานะปกติและเป็นธุรกรรม).
   * **รายการสินค้าและจำนวน:** ดูรายการสินค้าของ Order นั้นในชุดข้อมูล (Superstore แยกแต่ละแถวต่อละสินค้าในออเดอร์พร้อมจำนวน) แล้วนำ **Product ID** แต่ละตัวมาแทนด้วยรหัสย่อสินค้า (จากขั้นตอนที่ 2) ใส่ลงไปในช่อง slot แบบสลับช่องกับจำนวนที่ซื้อดังที่กำหนด (PID, Num, PID, Num, ...). หากออเดอร์มีสินค้า 2 ชนิด ก็จะใช้ 4 สล็อตแรก (PID1, Num1, PID2, Num2) และที่เหลืออีก 3 สล็อตสุดท้ายให้เติม 0. หากบางออเดอร์มีสินค้าชนิดเดียว ก็ใส่แค่ PID1, Num1 แล้วที่เหลือใส่ 0 จนครบ เป็นต้น.

   เมื่อดำเนินการครบทุกออเดอร์ เราจะได้ชุดข้อมูลธุรกรรมการขายทุกเหตุการณ์เป็นสตริง (ซึ่งรวมอยู่ในไฟล์ข้อมูลเดียวกับ reference ได้ หรือแยกไฟล์ตามสะดวก). แต่ละบรรทัดก็จะเชื่อมโยงกับข้อมูลอ้างอิงลูกค้า/สินค้าได้ผ่านรหัสย่อที่เราใส่ไว้นั่นเอง

4. **เตรียมข้อมูลการขนส่ง (ถ้ามีแยกต่างหาก):** จากแต่ละคำสั่งซื้อเดียวกันนั้น หากต้องการบันทึกสถานะการจัดส่งละเอียด (เช่นวันที่ส่งของ, วิธีส่ง, สถานะถึงมือหรือไม่) ก็สามารถสร้างบรรทัดการขนส่งตามรูปแบบ *Shipment Record* สำหรับ **สินค้าแต่ละชนิด** ในออเดอร์:

   * **วันที่ (Date):** ใช้ Ship Date ของสินค้านั้น (หรือวันที่ส่งจริง).
   * **OID:** ระบุ Order ID (หรือจะใช้รหัสย่อออเดอร์ถ้าสร้างไว้ก็ได้) ของคำสั่งซื้อที่สินค้าเป็นส่วนหนึ่ง.
   * **PID:** รหัสย่อสินค้าชนิดนั้น.
   * **StatN, StatC:** `0, B` (ธุรกรรมปกติ).
   * **รายละเอียดการจัดส่ง:** เช่น จำนวนที่ส่ง (ควรเท่ากับจำนวนที่สั่งถ้าส่งครบ), สถานะ (เช่น Shipped/Delivered), วิธีการจัดส่งหรือหมายเหตุ (เช่น “Second Class” หรือเลขติดตามพัสดุ). ช่องที่ไม่ได้ใช้ก็ใส่ 0.

   บันทึกข้อมูลนี้สำหรับสินค้าทุกตัวในทุกออเดอร์ที่เกี่ยวข้องกับการส่งของ. อย่างไรก็ตาม หากระบบของคุณรวมการขายและการส่งเข้าด้วยกัน หรือไม่ต้องการแยกสองเหตุการณ์นี้ ก็อาจไม่จำเป็นต้องมีบรรทัดการขนส่งแยก; ในที่นี้เรานำเสนอไว้เพื่อให้เห็นโครงสร้างที่ยืดหยุ่นว่าระบบ Anti-Normalization สามารถบันทึกได้ทั้งข้อมูลการขายและข้อมูลการติดตามการส่งสินค้าโดยใช้หลักการเดียวกัน

เมื่อเตรียมข้อมูลครบทั้งส่วนอ้างอิง (ลูกค้า, สินค้า) และส่วนธุรกรรม (การขาย, การขนส่ง) ตามขั้นตอนข้างต้น คุณจะได้ฐานข้อมูลเชิงข้อความที่พร้อมสำหรับการวิเคราะห์หรือนำไปใช้ต่อ. ไฟล์ข้อมูลสุดท้ายสามารถเป็นเพียงไฟล์ข้อความ CSV ที่รวมบรรทัดทั้งหมดเหล่านี้ โดยเราสามารถเรียงลำดับตาม Date ก็ได้เพื่อให้ง่ายต่อการอ่านประวัติเหตุการณ์ตามเวลา.

## การอ่านสตริงเหตุการณ์และคำนวณยอดขายจากข้อมูล

เมื่อมีข้อมูลอยู่ในรูปแบบ Anti-Normalization แล้ว การดึงสารสนเทศหรือคำนวณค่าต่างๆ สามารถทำได้โดยตรงจากสตริง **โดยไม่ต้องอาศัยการ Join ตาราง** เนื่องจากทุกความสัมพันธ์ถูกระบุผ่านรหัสในสตริงและโครงสร้างสล็อตที่กำหนดไว้ล่วงหน้า. เรามาดูวิธีอ่านและคำนวณ *ยอดขาย* ของธุรกรรมการขายจากตัวอย่างที่เตรียมไว้:

**1. การแยกส่วนประกอบสตริงธุรกรรม:** สมมติเรามีสตริงการขาย:

```
11/8/2016,C001,BY,0,B,P001,2,P002,3,0,0,0
```

ขั้นแรก เราสามารถแยกสตริงนี้ตามเครื่องหมายจุลภาคให้ได้เป็นส่วนๆ ดังนี้:

```
[ "11/8/2016", "C001", "BY", "0", "B", "P001", "2", "P002", "3", "0", "0", "0" ]
```

จากนั้นเราทราบโดยนิยามว่า:

* index 0 คือ วันที่ (`11/8/2016`),
* index 1 คือ รหัสย่อลูกค้า (`C001`),
* index 2 คือ รหัสการกระทำ (`BY` ซึ่งหมายถึงซื้อ),
* index 3 = 0, index 4 = B (สถานะและประเภท),
* index 5 เป็นต้นไปคือสล็อตข้อมูลรายการสินค้าและจำนวน:

  * index 5 = `"P001"` (PID1),
  * index 6 = `"2"` (Num1),
  * index 7 = `"P002"` (PID2),
  * index 8 = `"3"` (Num2),
  * index 9 = `"0"`, index 10 = `"0"`, index 11 = `"0"` (สล็อตที่เหลือไม่มีรายการ จึงเป็นศูนย์).

**2. การค้นหาข้อมูลอ้างอิง:** เมื่อได้ PID และจำนวนจากบรรทัดธุรกรรมแล้ว ขั้นต่อไปคือการดึงราคา (หรือข้อมูลอื่น) ของสินค้าแต่ละตัวจากบรรทัดข้อมูลสินค้า (Product Data) ที่เราเตรียมไว้. สำหรับ PID แต่ละตัว:

* ค้นหา **บรรทัดสินค้า** ที่มี Field2 (รหัสย่อสินค้า) ตรงกับ PID นั้น (เช่น PID `P001` และ `P002`). ในตัวอย่างของเรา:

  * บรรทัดสินค้า P001 ให้ราคาต่อหน่วย = 130.98
  * บรรทัดสินค้า P002 ให้ราคาต่อหน่วย = 243.98
* เราสามารถทำการค้นหานี้ด้วยวิธีใดก็ได้ที่สะดวก เช่น ถ้าเก็บข้อมูลทั้งหมดในสเปรดชีต เราอาจใช้ฟังก์ชัน VLOOKUP หรือ INDEX/MATCH โดยหา PID จากช่วงตารางสินค้าแล้วดึงค่าช่องราคามา, หรือถ้าใช้ภาษาการเขียนโปรแกรมก็อาจสร้างดิกชันนารี (พจนานุกรม) ที่ mapping จาก PID ไปเป็นราคาไว้ล่วงหน้าเพื่อความรวดเร็ว.

**3. การคำนวณยอดขายรวมของธุรกรรม:** เมื่อได้ราคาต่อหน่วยของสินค้าทุกชิ้นที่อยู่ในธุรกรรมแล้ว การคำนวณยอดขายรวมก็เพียงนำ *ราคาต่อหน่วย × จำนวน* ของแต่ละรายการมาบวกกัน:

* สำหรับ P001: 130.98 × 2 = **261.96**
* สำหรับ P002: 243.98 × 3 = **731.94**
* รวมสองรายการ = **993.90** (ดอลลาร์) ซึ่งคืดยอดขายรวมของคำสั่งซื้อ (เท่ากับข้อมูลใน Superstore ที่บรรทัดเหล่านั้นรวมกันพอดี)

เราสามารถเขียนเป็นสูตรหรือโค้ดโดยตรงได้ เช่น ใน **Excel** อาจเขียนสูตร (สมมติข้อมูลสตริงอยู่ในเซลล์ A2 และตารางอ้างอิงสินค้าอยู่ในช่วง `Products` โดยคอลัมน์แรกเป็น PID และคอลัมน์สองเป็น Price):

```excel
= INDEX(Products[Price], MATCH("P001", Products[PID], 0)) * 2 
+ INDEX(Products[Price], MATCH("P002", Products[PID], 0)) * 3
```

หรือใช้ฟังก์ชันสมัยใหม่อย่าง `TEXTSPLIT` เพื่อแยกค่าออกมาแล้วคำนวณก็ได้ (เพื่อความกระชับของแนวคิด ขอแสดงสูตรแบบตรงไปตรงมาตามด้านบน).

ในภาษาการเขียนโปรแกรมอย่าง **Python** ก็สามารถทำได้โดยการ split สตริงและ loop เช่น:

```python
record = "11/8/2016,C001,BY,0,B,P001,2,P002,3,0,0,0"
fields = record.split(",")
items = []
for i in range(5, len(fields), 2):      # เริ่มที่ช่อง 5 ไล่ไปทุกๆ 2 ช่อง (5,7,9,...)
    pid = fields[i]
    qty = int(fields[i+1])
    if pid == "0":
        break  # ถ้าเจอ 0 แสดงว่าหมดรายการสินค้าแล้ว
    price = product_price_dict[pid]     # product_price_dict คือ dict ที่แมป PID -> ราคา
    items.append(price * qty)
total_sales = sum(items)
print(total_sales)  # ผลลัพธ์จะได้ 993.90
```

โค้ดข้างต้นเป็นการสาธิตแนวคิด: เราแยกสตริงธุรกรรม, ดึงค่า PID และจำนวนออกมา, จากนั้นใช้พจนานุกรม `product_price_dict` ที่สร้างไว้ (จากข้อมูล reference ของสินค้า) เพื่อดึงราคา แล้วคูณกับจำนวนและรวมผลลัพธ์ได้ตรงๆ. จะเห็นได้ว่าการคำนวณนี้ไม่ต้อง JOIN ตารางหรือเขียนเงื่อนไขซับซ้อนหลายขั้น เพราะ**ตรรกะทุกอย่างถูกฝังอยู่ในโครงสร้างข้อมูลตั้งแต่ต้นทางแล้ว** – เรารู้อยู่แล้วว่าช่องไหนหมายถึงอะไร จึงสามารถเขียนสูตรหรือโค้ดอ้างอิงช่องเหล่านั้นได้ทันที.

**4. การดึงข้อมูลอื่นๆ:** นอกจากยอดขาย เราสามารถดึงข้อมูลอื่นจากสตริงเหตุการณ์ได้โดยวิธีคล้ายกัน:

* หากต้องการทราบ *ชื่อสินค้าทั้งหมด* ที่ลูกค้าซื้อในเหตุการณ์นี้ ก็ให้นำ PID แต่ละตัวไปค้นหา **ชื่อสินค้า (PN)** จากบรรทัดข้อมูลสินค้า.
* หากต้องการทราบว่าลูกค้าคนนี้อยู่รัฐอะไร (เพื่อใช้ในการวิเคราะห์ยอดขายตามภูมิภาค เป็นต้น) ก็สามารถนำ **CID** จากสตริงเหตุการณ์ไปค้นหาบรรทัดข้อมูลลูกค้า แล้วดึงค่า State หรือ Region มาใช้งาน.
* การสรุปยอดขายตาม Category หรือ Segment ลูกค้า ก็ทำได้โดยการกรองหรือจับคู่ข้อมูลข้ามบรรทัดในลักษณะเดียวกัน เช่น เราอาจเขียนสูตร SUMIFS ใน Excel ที่รวมยอด (price\*qty) โดยมีเงื่อนไข Category ตามที่ระบุในบรรทัดสินค้า หรือ Segment ตามบรรทัดลูกค้า เป็นต้น. ทุกอย่างสามารถทำได้ในการอ่านข้อมูล *ชุดเดียว* นี้ โดยอาศัยการ **lookup ภายใน** (เชื่อมโยงกันผ่านรหัสย่อที่ออกแบบไว้) แทนที่จะต้องรวมข้อมูลจากหลายตารางเหมือนวิธีดั้งเดิม

## ประโยชน์ของระบบ Anti-Normalization ในโลกความเป็นจริง

การจัดเก็บและจัดการข้อมูลด้วยแนวคิด Anti-Normalization มีข้อดีหลายประการในการจัดการข้อมูลธุรกิจจริง:

* **บริบทครบถ้วนและชัดเจน:** แต่ละบรรทัดมีเรื่องราวสมบูรณ์ในตัวมันเอง ทำให้ผู้ใช้หรือระบบอื่นอ่านเข้าใจได้ทันทีว่าบรรทัดนั้นเกี่ยวกับอะไร ใครทำอะไร ที่ไหนและอย่างไร โดยไม่ต้องรวบรวมข้อมูลจากหลายแห่ง เช่น ธุรกรรมการขายหนึ่งรายการก็มีทั้งผู้ซื้อ สินค้าที่ซื้อ จำนวน วันที่ และอื่นๆ อยู่ด้วยกัน. สิ่งนี้ช่วยลดปัญหาการสูญเสียบริบทเมื่อต้องการวิเคราะห์ข้อมูลย้อนหลัง เพราะเราไม่ต้อง拼ประกอบข้อมูลย่อยๆ จากหลายตารางให้กลับมาเป็นภาพใหญ่ (ไม่ต้อง “ต่อจิ๊กซอว์” ให้ได้ประโยคเต็มจากคำที่กระจัดกระจาย).

* **ลดความซับซ้อนของระบบและการสืบค้น:** เนื่องจากไม่ต้องใช้ตารางหลายชุดและความสัมพันธ์ซับซ้อน การสืบค้นข้อมูลเพื่อตอบคำถามทางธุรกิจจึงทำได้ง่ายขึ้นมาก. คำถามเช่น “ลูกค้า X ซื้ออะไรไปบ้างเมื่อวันที่ Y?” สามารถตอบได้โดยการค้นหาบรรทัดธุรกรรมที่ตรงกับลูกค้า X และวันที่ Y โดยตรง แล้วอ่านรายการสินค้าและจำนวนจากบรรทัดนั้นทันที แทนที่จะต้อง JOIN หลายตารางเหมือนในโครงสร้างแบบ normalization. ส่งผลให้นักพัฒนาหรือผู้วิเคราะห์ข้อมูลสามารถเขียนสูตรหรือโค้ดสั้นลงและลดโอกาสเกิดข้อผิดพลาด.

* **ยืดหยุ่นและรองรับการเปลี่ยนแปลง:** โครงสร้างสล็อต (Slot1–Slot7 ฯลฯ) สามารถปรับเพิ่มหรือลดได้เพื่อรองรับข้อมูลใหม่ๆ โดยไม่กระทบกับของเดิมมากนัก. หากวันหน้าต้องการเก็บข้อมูลเพิ่มเติม (เช่น ส่วนลดหรือการชำระเงินบางส่วน) ก็สามารถกำหนดให้ใช้สล็อตว่าง (เช่น Slot6 สำหรับส่วนลด, Slot7 สำหรับจำนวนเงินที่ชำระหนี้) ตามหลักการที่เคยมีการนำเสนอในระบบนี้ได้เลย **โดยไม่ต้องปรับโครงสร้างตาราง**หรือสร้างตารางใหม่. แต่ละช่องเราสามารถกำหนดความหมายไว้ล่วงหน้าให้สอดคล้องกับบริบท (เช่น กรณีงานขายอาจกำหนด slot6 ไว้ใส่จำนวนเงินส่วนลด ถ้ามี; กรณีธุรกรรมจ่ายหนี้อาจใช้ slot7 ใส่จำนวนเงินที่ชำระ เป็นต้น) ทำให้การขยายระบบในอนาคตทำได้ง่าย และข้อมูลเก่ากับใหม่ยังคงอยู่ในรูปแบบที่เข้าใจร่วมกันได้.

* **สอดคล้องกับกระบวนการจริงและลดงานหลังบ้าน:** ระบบ Anti-Normalization ส่งเสริมให้เราบันทึกข้อมูลตามที่เหตุการณ์ธุรกิจเกิดขึ้นจริง (*event-driven*) แทนที่จะบังคับให้แยกส่วนเพื่อให้เข้ากับโครงสร้างตารางที่ตายตัว. ดังนั้นคนหรือระบบที่ป้อนข้อมูลก็ทำงานกับฟอร์มที่สอดคล้องกับความคิด (หนึ่งฟอร์มต่อหนึ่งธุรกรรมอย่างครบถ้วน) ลดการกรอกซ้ำซ้อนหรือข้ามไปมาหลายที่. เมื่อเก็บข้อมูลได้ดีตั้งแต่ต้นน้ำ ความจำเป็นที่จะต้องมาทำ **Data Cleaning** หรือ **Normalize ย้อนหลัง** ก็ลดลงอย่างมาก เพราะข้อมูลทุกชิ้นถูกจัดให้อยู่ในรูปแบบที่มีความหมายและเป็นระบบตั้งแต่ตอนบันทึกแล้ว (หลักการ “ไม่ต้องมา normalize ทีหลังหากเรา encode logic มาตั้งแต่แรก”). นี่ช่วยให้องค์กรประหยัดเวลาในการแก้ไขข้อมูลย้อนหลัง และลดข้อผิดพลาดสะสมจากการรวมข้อมูลหลายส่วนเข้าด้วยกัน.

* **การประมวลผลโดยเครื่องมือหรือ AI ง่ายขึ้น:** เพราะข้อมูลมีโครงสร้างในตัวมันเองและเป็นแบบข้อความ (textual format) ทำให้ระบบอื่นที่ต้องใช้ข้อมูล (เช่น โปรแกรมวิเคราะห์, AI) สามารถอ่านความหมายได้ไม่ยากโดยไม่ต้องมีเมตาดาต้าภายนอกมาก. ยกตัวอย่างเช่น AI ที่ถูกป้อนข้อมูลธุรกรรมเหล่านี้ สามารถเรียนรู้รูปแบบว่า Field ใดคืออะไรได้จากตำแหน่งเชิงโครงสร้างของมัน ซึ่งสม่ำเสมอ. หรือเราจะเขียนสคริปต์เล็กๆ เพื่อ parse ข้อมูลทุกบรรทัดแล้วดึง insight ต่างๆ ก็ทำได้ทันทีเพราะไม่ต้องต่อฐานข้อมูลหรือ ORM ใดๆ แค่ไฟล์เดียวก็เพียงพอ.

## สรุป

ระบบ Anti-Normalization ที่ฝังตรรกะลงในสตริงดังที่อธิบายโดยใช้ชุดข้อมูล Superstore เป็นตัวอย่าง แสดงให้เห็นว่าการจัดเก็บข้อมูลธุรกรรมให้อยู่ในรูป “ประโยคข้อมูล” ที่สมบูรณ์ในตัว สามารถช่วยให้การจัดการและวิเคราะห์ข้อมูลมีประสิทธิภาพขึ้นได้. แม้ว่าวิธีนี้จะขัดกับหลักการฐานข้อมูลแบบดั้งเดิม แต่ในทางปฏิบัติพบว่ามันช่วยลดความยุ่งยากในการทำความเข้าใจภาพรวมของเหตุการณ์ธุรกิจ และลดขั้นตอนการรวมข้อมูลข้ามตารางลง. โดยสรุป **ทุกๆ บรรทัดในระบบ Anti-Normalization เปรียบเสมือนเรื่องราวหนึ่งเรื่องที่เล่าจบในบรรทัดเดียว** ผู้ใช้งานหรือเครื่องมือสามารถหยิบมาอ่านหรือคำนวณต่อได้เลย เช่นเดียวกับตัวอย่างการดึงยอดขายที่เราได้สาธิต – ทั้งหมดนี้เกิดขึ้นได้เพราะข้อมูลถูกออกแบบให้พกพาตรรกะของตัวเองมาด้วยตั้งแต่เริ่มบันทึกนั่นเอง. ด้วยการวางโครงสร้างแบบยืดหยุ่นและสอดคล้องกับเหตุการณ์จริง ระบบนี้จึงมีศักยภาพในการรองรับข้อมูลธุรกิจที่ซับซ้อนในโลกความเป็นจริงได้อย่างมีประสิทธิผลและปรับตัวตามความต้องการที่เปลี่ยนแปลงได้ง่าย.


Order Date, Order ID, Ship Date, Ship Mode

Customer ID, Customer Name, Segment, Country, City, State, Postal Code, Region

Product ID, Category, Sub-Category, Product Name

Sales, Quantity, Discount, Profit