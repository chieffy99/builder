Concept
"total_slots": 7/24,
"reasoning": "Data handing",
"AI & Humans_friendly": true
"row_scanning": "2 Eye & my Old",
"cognitive_load": "Predivtive Desinge"

OntologyCore 
Event: Narative/Sting/Sentence
Word: Rule/Field/Data dict
Logic: Reasoning/Language/Formula 
Space: Dimensions/Position/Slot 
Time: Rotten/Index/tenses 
Gravity: Relation/ID/SOV
Transform: Shift/Stat/Germinate
new idea
Invert: The system that not use '-' in normal. add 'Invert' rule for allow 'turn to opposit' by add '-' in data. ex: -sting, -weight, -meaning

It can't use the normal Ontology because it maps in the middle. You may not know that it is important enough to use the word that originates the "field name".


The Word can't be the Language.

The Word can't be a character. 

The Word can't cause events.

The Word can't be described.

The Word can't be the sentence.

The Word might be subset all of above.

But All of above cant be when no one word.

In the real world, we rarely see Word being used to create characters, whether in novels, games, or movies. Even though Voldemort's name is a taboo in the wizarding community, and non-casting spells are an important skill in many stories, we never see Word, the one who can give birth in death.

When I say trading activity, it's in a few words because it's less than the names of the columns, because I use a behavioral structure, it's a description, not a label, and it allows me to predict trading behavior almost instantly.

When you look at the behavior of money, the behavior of accounts, the behavior of revenue, the behavior of expenses, the behavior of cash, the behavior of.... it describes all these other things that are interrelated.

Think out lou, how much more the structure in the manual file can be expanded?
How many columns are there?
Try to observe the activities of ID
1. Warehouse 
2. Supply
3. Distrbute  
4. Customers
The money will travel here. But if you go into details, it is another domain, such as customer data, which is CRM, but it is not a trading. It must be separated to the user history side.

From a customer's transection, just count 0 and 1 directly and you will know liquidity, than Slots 6 and 7 are volume and quantity of products in each slot, it maythe customer churn. That without to look at my clash flow.

How the world manages interest? Date? deb (Stat)? deduce (Slot)? Is it difficult to do?
For me,  problam in place to put table in sheet. And i am lazy to follow rate by self.

The system that needs to be concerned is the calculation of time and behavior measurement, which behavior is likely to have more problems than data collection. The important thing is that the switch is a tool for Dev to turn off the feature in case the behavior has a problem, and the signal light can be used when the behavior switch is on, to turn on and off the light to tell the tester that the behavior measurement is on or off to trick (I think the system is fair enough to know that there is a UI light, but even if it is not on, it is still useful).

For time, it is also related to interest. สมมุติว่า  10% per day, it is usually counted. first is 10, than 8 left and it continues to be calculated. 
Which will be counted every day, separating debts. But when paying off debts, it will be subtracted from the last debt first according to fairness, so
Day 1, 2, 3, 4, 5, 6, 7
Debt 100, -20, 0, 100, 0, -50, 0
The result of interest 0, 10, 8, 8, 18, 18, 13

1. c100,BYK,1,B, (1000),0,0 
2. c100,BYK,1,B, ( 0),0,200 =10 
3. c100,BYK,1B, (0),0,0 =8
4. c100,BYK,1,B, (1000),0,0 =8
5. c100,BYK,1B, (1000),0,0 =18
6. c100,BYK,1,B, (1000),0,0 = 28
7. c100,BYK,1,B, (0),0,2000 =38
8. c100,BYK,1,B, (0),0,0 = 18
9. c100,BYK,1,B, (1000),0,0 
10. c100,BYK,1,B, (1000),0,0
11. c100,BYK,1,B, (1000),0,0
12. c100,BYK,1,B, (1000),0,0

I don't know how the banking system works. Does it have to be shown every day? How do you separate the details? Separate or combine? If separate, it's a bit of a hassle. If the interest runs every day, how will most systems generate input? In my case, I might leave it for a day and then continue the field.

Data consistency mechanism at the structural level, no need to rely on application-level logic. If the data set has a sting as a formula in the form of an N file, but changes it to fit the slot structure, there is no problem. Including datadic 

Example of searching for customer data customer_record = "11/8/2016, C001, CG-12520, 0, C, Claire Gute, Consumer, United States, Henderson, Kentucky, 42420, South" < The method of finding it can be called like sumif. 

Troubleshooting, processing and searching for data: 
Can work as csv or convert back to any format in any system. Throw it into excel and it will be a table. 
If you store files separately by category, it will reduce the burden on the system. Importantly, it can be sorted. 
And don't forget that it is in someone else's equation or formula, so it is slow. If it has its own, the problem will be gone immediately. 
Data that has been plotted in a table on various platforms should be in the form of output. You don't have to find it again. 

Users can learn the system in 1 day, using their existing knowledge, translating just the schema, and the formulas can be mapped, just telling them what the in-outs are for each field.
AI should be able to do everything without training.

Germinate is an additional feature, different from the normal, with Date, ID as the header, but multiple rows are arranged by line (not switched), but the row will have its own independent stat. It can create a mechanism to maintain the row order with slots to store index values, including adding time fields as event values ​​(just data input, not data vandidate).
Do you understand that when it is in this state, there will be a schema similar to xml or something like that, which is used to manage complex data, there must be rules, a strong schema, like you may use it to store an array of images, for example, suppose that from a general row, all slots need to be dynamic, instead of breaking out, transpose it into a single field and add right out continuously, no need to break out (unless you want a header).





#2
Let's look at referencing Ontology. Initially, my structure was more flexible than Ontology.
I will not use the language of ontology to map with the field, but I will use my string structure to map instead.

Let’s say that some rules in the file can't be used. Most of my system is:

Identifiers: such as header or field values, which are generally important.
Field/data: usually can be put in ID1, ID2, Slot, but will have roles and functions depending on context.
I have used it for a long time but never explained it like this, so there are no clear rules.
But when combined, it becomes a behavior that changes and can be used to classify events.
(StatN, StatC) indicate the result or status of the Event.
Normally, it is a transform or control and helps increase classification, such as changing the price or type of transaction.
In this case, B is the quantity, C is the price of the product. When calculated together, A is the total price.
The transformation of Stat does not transform every item in the row the same way, but Stat is like a code to control the event.
In transactions I use, I put the last 2 slots as dreduce and deduce rules, not changed by the transaction, so they can represent many events in commercial transactions, or can be called stat rules.
Therefore, designing various fields in slots is important, must consider the events to be represented.

For example, the following data (starting with the first field as statN):
0,B,0,2,3,4,0,0,0 = Customer buys with cash
0,B,0,2,3,4,0,20,0 = Customer buys with cash and has a discount of 20
0,B,0,2,3,4,0,0,500 = Customer buys with cash and pays debt (or other events specified by the shop)

1,B,0,2,3,4,0,0,0 = Customer buys on credit
1,B,0,2,3,4,0,20,0 = Customer buys on credit and has a discount of 20
1,B,0,2,3,4,0,0,500 = Customer buys on credit and pays part of the debt with cash (or pays debt directly)

0,B,0,0,0,0,0,0,0 = Nothing happens in this transaction
0,B,0,0,0,0,0,20,0 = The system may have a discount of 20 due to time (e.g., birthday) when in this status
0,B,0,0,0,0,0,0,500 = Customer only pays debt

1,B,0,0,0,0,0,0,0 = Maybe an error, but a value of 0 has no effect on any transactions but should be checked
1,B,0,0,0,0,0,20,0 = Just in case, but anything about debt and the customer receives it should be checked
1,B,0,0,0,0,0,0,500 = Same as above

In my transaction system, there is no compu stored in the data. For example, suppose
1,B,0,2,3,4,0,20,500

Suppose each slot of product is equal to and uses C as a reference code for the price (or referenced price):
slot1 = 10, slot2 = 15, slot3 = 20, slot4 = 25, slot5 = 30

1,B,0,2,3,4,0,20,500 = B remembers the products in slots 1, 2, 3, 4, and 5, not yet priced
1,C,10,15,20,25,30,20,500 = Changing C can create a new string as an input price for the products in these slots
1,A,0,30,60,50,0,20,500 = B*C means the customer buys on credit for 140 baht, gets a discount of 20 baht, pays 500 baht

Formula
Cash = Sumifs(SlotI,Relation+Dimensions+Time+Logic,N=0)
Credit = Sumifs(SlotI,Relation+Dimensions+Time+Logic,N=1)

Instead of having to store the quantity of products and the selling price, I create logic that relates, causing value transformation and only storing the transaction of B with the database being C (no need to store separately).

You can see that events occur from slot assignment but are classified by stat, then specify the relationship with excel formulas like sumif and use it anywhere.
It all means something, not to mention the use of invert (-) with numbers, and more than that.
And the important thing is, I will focus on the possibilities of events, not just the data.

