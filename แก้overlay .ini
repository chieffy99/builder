// ค่า z-index พื้นฐานสำหรับการ์ด
const BASE_Z_INDEX = 10;
const TOP_Z_INDEX = 11;

// เมื่อคลิกที่การ์ดใด
card.addEventListener('mousedown', function() {
    // นำการ์ดที่คลิกมาด้านหน้า
    this.style.zIndex = TOP_Z_INDEX;
    
    // นำการ์ดอื่นๆ ทั้งหมดไปด้านหลัง
    document.querySelectorAll('.card').forEach(otherCard => {
        if (otherCard !== this) {
            otherCard.style.zIndex = BASE_Z_INDEX;
        }
    });
});
}
+++++++

// แสดงการแจ้งเตือนแบบไม่ต้องกดปิด (auto-dismiss)
function showToast(message, duration = 3000) {
    // สร้าง toast notification
    const toast = document.createElement('div');
    toast.className = 'toast-notification';
    toast.innerText = message;
    
    // เพิ่มเข้าไปในหน้า
    document.body.appendChild(toast);
    
    // แสดง toast ด้วย animation
    setTimeout(() => toast.classList.add('show'), 10);
    
    // ซ่อนและลบ toast หลังจากเวลาที่กำหนด
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => document.body.removeChild(toast), 300);
    }, duration);
    
    // คลิกที่ไหนก็ปิดได้
    document.addEventListener('click', function hideToast() {
        toast.classList.remove('show');
        setTimeout(() => {
            if (document.body.contains(toast)) {
                document.body.removeChild(toast);
            }
        }, 300);
        document.removeEventListener('click', hideToast);
    }, { once: true });
}



.toast-notification {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%) translateY(-100px);
    background: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 12px 25px;
    border-radius: 8px;
    font-size: 16px;
    z-index: 9999;
    opacity: 0;
    transition: all 0.3s ease;
    pointer-events: none; /* ให้คลิกผ่านได้ */
}

.toast-notification.show {
    transform: translateX(-50%) translateY(0);
    opacity: 1;
}

+++++++



// ฟังก์ชั่นกลางสำหรับการเริ่มโหมดซ้อน - เรียกได้จากทุกช่องทาง
function enterStackMode(sourceCard) {
    // บันทึกสถานะ
    app.isStackingMode = true;
    app.sourceCard = sourceCard;
    
    // หาการ์ดที่อยู่บนสุด (เริ่มต้น)
    const topCard = getTopCard(sourceCard.id);
    
    if (topCard) {
        // แสดง overlay บนการ์ดบนสุดทันที
        showStackOverlay(topCard);
    } else {
        alert("ไม่มีการ์ดอื่นบนพื้นที่ทำงาน");
        exitStackMode();
    }
    
    // เพิ่ม event listeners สำหรับเลือกการ์ดอื่นๆ
    document.addEventListener('mousemove', checkCardUnderCursor);
}

function showStackOverlay(targetCard) {
    // เก็บข้อมูลการ์ดเป้าหมายปัจจุบัน
    app.currentTargetCard = targetCard;
    
    const overlay = document.getElementById('stackOverlay');
    const rect = targetCard.getBoundingClientRect();
    
    // ตั้งค่าตำแหน่งและขนาด
    overlay.style.top = rect.top + 'px';
    overlay.style.left = rect.left + 'px';
    overlay.style.width = rect.width + 'px';
    overlay.style.height = rect.height + 'px';
    
    // เตรียมเนื้อหาสำหรับ overlay (รวมถึงปุ่มควบคุม)
    overlay.innerHTML = `
        <div class="overlay-content">
            <div class="overlay-message">ซ้อนการ์ดที่นี่</div>
            <div class="overlay-buttons">
                <button id="confirmStackBtn" class="btn-overlay-confirm">ยืนยัน</button>
                <button id="cancelStackBtn" class="btn-overlay-cancel">ยกเลิก</button>
            </div>
        </div>
    `;
    
    // แสดง overlay
    overlay.style.display = 'flex';
    
    // ผูกอีเวนต์กับปุ่มภายใน overlay
    document.getElementById('confirmStackBtn').onclick = confirmStacking;
    document.getElementById('cancelStackBtn').onclick = exitStackMode;
}


// เมื่อเลือกตัวเลือก "วางซ้อน" จากเมนูที่มีอยู่
function startStacking(sourceCardId, targetCardId) {
    const sourceCard = document.getElementById(sourceCardId);
    const targetCard = document.getElementById(targetCardId);
    
    if (sourceCard && targetCard) {
        // แสดง overlay ที่ตำแหน่งของการ์ดเป้าหมาย
        showStackOverlayOnCard(targetCard);
        
        // ใช้ปุ่มที่มีอยู่แล้วในระบบ
        // โค้ดที่ทำงานกับปุ่มที่มีอยู่...
    }
}

function showStackOverlayOnCard(card) {
    const overlay = document.getElementById('stackOverlay');
    const rect = card.getBoundingClientRect();
    
    // กำหนดตำแหน่งและขนาดให้ตรงกับการ์ด (รองรับ freesize)
    overlay.style.top = rect.top + 'px';
    overlay.style.left = rect.left + 'px';
    overlay.style.width = rect.width + 'px';
    overlay.style.height = rect.height + 'px';
    overlay.style.display = 'block';
    
    // ไม่ต้องเพิ่มองค์ประกอบอื่นเพราะมีปุ่มและตัวเลือกในระบบอยู่แล้ว
}