# -*- coding: utf-8 -*-
"""
Anti-Normalization Engine Formula Generator
‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏ï‡∏£ SUMIFS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Behavior-Based Classification
"""

import os
import sys

# ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏°‡∏õ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°
ENTITY_MAPPING = {
    "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤": "CU", "customer": "CU", "1": "CU",
    "‡∏ú‡∏π‡πâ‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢": "SU", "supplier": "SU", "2": "SU", 
    "‡∏£‡πâ‡∏≤‡∏ô": "SH", "shop": "SH", "3": "SH",
    "‡∏ï‡∏•‡∏≤‡∏î": "MK", "market": "MK", "4": "MK",
    "‡∏Ñ‡∏•‡∏±‡∏á": "SK", "stock": "SK", "5": "SK"
}

ACTION_MAPPING = {
    "‡∏Ç‡∏≤‡∏¢": "SA", "sell": "SA", "1": "SA",
    "‡∏ã‡∏∑‡πâ‡∏≠": "BY", "buy": "BY", "2": "BY",
    "‡∏™‡∏±‡πà‡∏á": "PO", "order": "PO", "3": "PO", 
    "‡πÄ‡∏Å‡πá‡∏ö": "PK", "pick": "PK", "4": "PK"
}

STATUS_TYPE_MAPPING = {
    "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î": "0", "cash": "0", "1": "0",
    "‡πÄ‡∏ä‡∏∑‡πà‡∏≠": "1", "credit": "1", "2": "1"
}

VALUE_TYPE_MAPPING = {
    "‡πÄ‡∏á‡∏¥‡∏ô": "A", "money": "A", "1": "A",
    "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": "B", "quantity": "B", "2": "B", 
    "‡∏£‡∏≤‡∏Ñ‡∏≤": "C", "price": "C", "3": "C"
}

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def show_banner():
    print("=" * 60)
    print("  Anti-Normalization Engine - Formula Generator")
    print("  ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏ï‡∏£ SUMIFS ‡∏î‡πâ‡∏ß‡∏¢ Behavior-Based Analysis")
    print("=" * 60)
    print()

def show_options(mapping, title):
    print(f"\n{title}:")
    for i, (thai, code) in enumerate(mapping.items(), 1):
        if i <= len(mapping) // 2:  # Show first half with Thai names
            print(f"  {i}. {thai} ({code})")

def get_user_choice(mapping, prompt, category):
    while True:
        print(f"\n{prompt}")
        show_options(mapping, f"‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å{category}")
        choice = input("\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç/‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢/‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©): ").strip().lower()
        
        # Check if it's a direct match
        for key, value in mapping.items():
            if choice == key.lower() or choice == value.lower():
                return value
        
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")

def generate_formula():
    clear_screen()
    show_banner()
    
    print("‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡∏ö")
    print("‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏ï‡∏£ SUMIFS ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
    
    # Get behavior information
    entity = get_user_choice(ENTITY_MAPPING, 
                           "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÉ‡∏Ñ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö?", "‡πÄ‡∏≠‡∏ô‡∏ó‡∏¥‡∏ï‡∏µ")
    
    action = get_user_choice(ACTION_MAPPING,
                           "‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö?", "‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥")
    
    status_type = get_user_choice(STATUS_TYPE_MAPPING,
                                "‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö?", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞")
    
    value_type = get_user_choice(VALUE_TYPE_MAPPING,
                               "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏´‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö?", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    # Get target column
    target_column = input("\n‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏ä‡πà‡∏ô G:G ‡∏´‡∏£‡∏∑‡∏≠ slot7): ").strip()
    if not target_column:
        target_column = "G:G"
    
    # Generate formula
    formula = f'=SUMIFS({target_column},ID1,"{entity}",ID2,"{action}",StatN,"{status_type}",StatC,"{value_type}")'
    
    # Show result
    clear_screen()
    show_banner()
    print("‚úÖ ‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß:")
    print("=" * 50)
    print(formula)
    print("=" * 50)
    
    print(f"\n‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:")
    print(f"- ‡πÄ‡∏≠‡∏ô‡∏ó‡∏¥‡∏ï‡∏µ: {entity}")
    print(f"- ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥: {action}")
    print(f"- ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: {'‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î' if status_type == '0' else '‡πÄ‡∏ä‡∏∑‡πà‡∏≠'}")
    print(f"- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {['‡πÄ‡∏á‡∏¥‡∏ô', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', '‡∏£‡∏≤‡∏Ñ‡∏≤'][['A', 'B', 'C'].index(value_type)]}")
    print(f"- ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {target_column}")
    
    return formula

def show_examples():
    clear_screen()
    show_banner()
    print("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢:")
    print("=" * 50)
    
    examples = [
        ("‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡πâ‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏≤ (‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î, ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ)", '=SUMIFS(G:G,ID1,"CU",ID2,"SA",StatN,"0",StatC,"A")'),
        ("‡∏ú‡∏π‡πâ‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏Ç‡πâ‡∏≤‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤ (‡πÄ‡∏ä‡∏∑‡πà‡∏≠, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô)", '=SUMIFS(G:G,ID1,"SU",ID2,"BY",StatN,"1",StatC,"B")'),
        ("‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏≤ (‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î, ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°)", '=SUMIFS(G:G,ID1,"SH",ID2,"PO",StatN,"0",StatC,"C")'),
        ("‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ (‡πÄ‡∏ä‡∏∑‡πà‡∏≠, ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ)", '=SUMIFS(G:G,ID1,"MK",ID2,"PK",StatN,"1",StatC,"A")')
    ]
    
    for i, (description, formula) in enumerate(examples, 1):
        print(f"{i}. {description}")
        print(f"   {formula}")
        print()

def show_mapping_reference():
    clear_screen()
    show_banner()
    print("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏£‡∏´‡∏±‡∏™ (Reference Mapping):")
    print("=" * 50)
    
    print("\nüè¢ ‡πÄ‡∏≠‡∏ô‡∏ó‡∏¥‡∏ï‡∏µ (Entities):")
    for thai, code in ENTITY_MAPPING.items():
        if len(thai) > 3:  # Show only Thai names
            print(f"  {thai} ‚Üí {code}")
    
    print("\n‚ö° ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ (Actions):")
    for thai, code in ACTION_MAPPING.items():
        if len(thai) > 2:  # Show only Thai names
            print(f"  {thai} ‚Üí {code}")
    
    print("\nüí∞ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (Payment Status):")
    for thai, code in STATUS_TYPE_MAPPING.items():
        if len(thai) > 3:  # Show only Thai names
            print(f"  {thai} ‚Üí StatN:{code}")
    
    print("\nüìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Value Types):")
    for thai, code in VALUE_TYPE_MAPPING.items():
        if len(thai) > 3:  # Show only Thai names
            print(f"  {thai} ‚Üí StatC:{code}")

def main_menu():
    while True:
        clear_screen()
        show_banner()
        print("üìã ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å:")
        print("1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏ï‡∏£‡πÉ‡∏´‡∏°‡πà (Generate New Formula)")
        print("2. ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏π‡∏ï‡∏£ (View Examples)")
        print("3. ‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏£‡∏´‡∏±‡∏™ (View Reference)")
        print("4. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° (Exit)")
        
        choice = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π (1-4): ").strip()
        
        if choice == "1":
            formula = generate_formula()
            input("\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...")
            
        elif choice == "2":
            show_examples()
            input("\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...")
            
        elif choice == "3":
            show_mapping_reference()
            input("\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å...")
            
        elif choice == "4":
            print("\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö! üëã")
            break
            
        else:
            print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π 1-4")
            input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...")

if __name__ == "__main__":
    try:
        main_menu()
    except KeyboardInterrupt:
        print("\n\n‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
    except Exception as e:
        print(f"\n‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å...")
