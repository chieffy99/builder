# การผสมการ์ดแบบซับซ้อน: แนวทางการพัฒนา

จากการวิเคราะห์ระบบของคุณ ผมเห็นว่าการผสมการ์ดเป็นฟีเจอร์หลักที่ต้องการการออกแบบอย่างรอบคอบ เพื่อให้รองรับทั้งการตั้งชื่อที่มีความหมายและการคำนวณที่ซับซ้อน ต่อไปนี้คือโค้ดที่จะช่วยให้คุณเริ่มต้นได้:

## 1. สร้างฟังก์ชันผสมการ์ด (Card Mixing Function)

```javascript
// เพิ่มเข้าไปใน dashboardManager

/**
 * ผสมการ์ดที่เลือกและสร้างการ์ดใหม่
 * @param {Array} selectedCardIds - รายการ ID ของการ์ดที่ต้องการผสม
 * @param {String} mixType - รูปแบบการผสม (sum, avg, ratio, custom)
 * @param {Object} customSettings - ค่าที่กำหนดเองเพิ่มเติม (ถ้ามี)
 */
mixCards: function(selectedCardIds, mixType = 'sum', customSettings = {}) {
    // 1. รวบรวมการ์ดที่เลือก
    const cardsToMix = selectedCardIds
        .map(id => this.cards.find(c => c.id === id))
        .filter(card => card !== undefined);
    
    if (cardsToMix.length < 2) {
        alert('กรุณาเลือกการ์ดอย่างน้อย 2 การ์ด');
        return null;
    }
    
    // 2. สร้างการ์ดใหม่
    const newId = `card-${this.nextId++}`;
    
    // 3. กำหนดชื่อการ์ดใหม่ตามหลักการ Naming Convention
    const newTitle = this.generateMixedCardTitle(cardsToMix, mixType);
    
    // 4. กำหนดประเภทการ์ดและสร้างข้อมูล
    const firstCardType = cardsToMix[0].chartType;
    const isAllSameType = cardsToMix.every(card => card.chartType === firstCardType);
    
    if (!isAllSameType) {
        alert('การผสมการ์ดต่างประเภทยังไม่รองรับในขณะนี้');
        return null;
    }
    
    // 5. สร้างการ์ดใหม่ตามตำแหน่งของการ์ดแรก
    const firstCard = document.getElementById(cardsToMix[0].id);
    const x = parseInt(firstCard.style.left) + 20;
    const y = parseInt(firstCard.style.top) + 20;
    
    // 6. เก็บข้อมูลต้นทางและสร้างการ์ดผสม
    const mixedCard = {
        id: newId,
        title: newTitle,
        type: cardsToMix[0].type,
        chartType: firstCardType,
        sourceCards: cardsToMix.map(card => ({ 
            id: card.id, 
            title: card.title,
            formula: card.formula || "default",
            timestamp: new Date().toISOString()
        })),
        isMixed: true,
        mixType: mixType,
        customSettings: customSettings,
        mixDepth: Math.max(...cardsToMix.map(c => c.mixDepth || 0)) + 1
    };
    
    // 7. สร้างฟอร์มูลาผสมตามประเภทการผสม
    mixedCard.formula = this.generateMixedFormula(cardsToMix, mixType, customSettings);
    
    // 8. สร้างข้อมูลกราฟผสม
    mixedCard.data = this.combineMixedData(cardsToMix, firstCardType, mixType);
    
    // 9. สร้างการ์ดในพื้นที่ทำงาน
    this.createMixedCard(mixedCard, x, y);
    
    // 10. ทำอย่างไรกับการ์ดต้นทาง (ตามการตั้งค่า)
    if (customSettings.removeOriginals) {
        cardsToMix.forEach(card => this.removeCard(card.id));
    } else if (customSettings.hideOriginals) {
        cardsToMix.forEach(card => {
            const cardEl = document.getElementById(card.id);
            cardEl.style.opacity = '0.5';
            cardEl.classList.add('source-card');
        });
    }
    
    return mixedCard;
},

/**
 * สร้างชื่อการ์ดผสมตามหลักการตั้งชื่อ
 */
generateMixedCardTitle: function(cards, mixType) {
    // ตัวอย่างการสร้างชื่อตามรูปแบบ prefix_action_object
    
    // 1. แยกส่วนประกอบของชื่อการ์ด
    const components = cards.map(card => {
        // ตัวอย่างการแยกชื่อ OTPKPT เป็น prefix=OT, action=PK, object=PT
        const title = card.title;
        
        // สมมติว่าชื่อมีรูปแบบ XXYYTT (2 ตัว, 2 ตัว, 2 ตัว)
        let prefix = title.substring(0, 2);
        let action = title.substring(2, 4);
        let object = title.substring(4, 6);
        
        // สำหรับการ์ดผสมที่ซับซ้อน
        if (card.isMixed) {
            // ใช้ชื่อที่ถูกสร้างไว้แล้ว
            return {
                prefix: card.mixedComponents?.prefix || prefix,
                action: card.mixedComponents?.action || action,
                object: card.mixedComponents?.object || object
            };
        }
        
        return { prefix, action, object };
    });
    
    // 2. รวมส่วนประกอบตามรูปแบบการผสม
    let mixedPrefix = '';
    let mixedAction = '';
    let mixedObject = '';
    
    switch(mixType) {
        case 'sum':
            // รวม prefix แบบไม่ซ้ำ
            mixedPrefix = [...new Set(components.map(c => c.prefix))].join('');
            // ใช้ action SUM
            mixedAction = 'SM';
            // ใช้ object จากการ์ดแรก
            mixedObject = components[0].object;
            break;
            
        case 'avg':
            // รวม prefix แบบไม่ซ้ำ
            mixedPrefix = [...new Set(components.map(c => c.prefix))].join('');
            // ใช้ action AVG
            mixedAction = 'AV';
            // ใช้ object จากการ์ดแรก
            mixedObject = components[0].object;
            break;
            
        case 'ratio':
            // ใช้ prefix จากการ์ดแรกตามด้วยการ์ดที่สอง
            mixedPrefix = components[0].prefix + components[1].prefix;
            // ใช้ action RT (ratio)
            mixedAction = 'RT';
            // ใช้ object จากการ์ดแรก
            mixedObject = components[0].object;
            break;
            
        case 'custom':
            // ใช้ค่าที่กำหนดเองจาก customSettings
            mixedPrefix = customSettings.prefix || [...new Set(components.map(c => c.prefix))].join('');
            mixedAction = customSettings.action || 'CX';
            mixedObject = customSettings.object || components[0].object;
            break;
            
        default:
            // การผสมทั่วไป - รวมทุกส่วน
            mixedPrefix = [...new Set(components.map(c => c.prefix))].join('');
            mixedAction = [...new Set(components.map(c => c.action))].join('');
            mixedObject = components[0].object;
    }
    
    // 3. จำกัดความยาว
    mixedPrefix = mixedPrefix.substring(0, 6); // จำกัดความยาวตามต้องการ
    mixedAction = mixedAction.substring(0, 4);
    
    // 4. สร้างชื่อผสมสมบูรณ์
    const mixedTitle = mixedPrefix + mixedAction + mixedObject;
    
    // 5. เก็บข้อมูลส่วนประกอบสำหรับการผสมซ้อน
    const mixedComponents = {
        prefix: mixedPrefix,
        action: mixedAction,
        object: mixedObject
    };
    
    return {
        title: mixedTitle,
        components: mixedComponents
    };
},

/**
 * สร้างสูตรสำหรับการ์ดผสม
 */
generateMixedFormula: function(cards, mixType, customSettings) {
    // สร้างสูตรตามประเภทการผสม
    let formula = "";
    
    switch(mixType) {
        case 'sum':
            // รวมสูตรของทุกการ์ด
            formula = cards.map(card => `(${card.formula || "0"})`).join(" + ");
            break;
            
        case 'avg':
            // ค่าเฉลี่ยของทุกการ์ด
            formula = `(${cards.map(card => `(${card.formula || "0"})`).join(" + ")}) / ${cards.length}`;
            break;
            
        case 'ratio':
            // อัตราส่วนระหว่าง 2 การ์ด
            if (cards.length >= 2) {
                formula = `(${cards[0].formula || "0"}) / (${cards[1].formula || "1"})`;
            } else {
                formula = cards[0].formula || "0";
            }
            break;
            
        case 'custom':
            // สูตรที่กำหนดเอง
            formula = customSettings.formula || 
                      cards.map(card => `(${card.formula || "0"})`).join(" + ");
            break;
            
        default:
            // การผสมทั่วไป - รวมค่า
            formula = cards.map(card => `(${card.formula || "0"})`).join(" + ");
    }
    
    return formula;
},

/**
 * รวมข้อมูลของการ์ดที่จะผสม
 */
combineMixedData: function(cards, chartType, mixType) {
    // ตัวอย่างสำหรับการผสมข้อมูลกราฟ
    if (chartType === 'line' || chartType === 'bar') {
        // สร้างชุดข้อมูลรวม
        const combinedData = {
            labels: cards[0].data.labels, // ใช้ label จากการ์ดแรก
            datasets: []
        };
        
        // รวม datasets ตามประเภทการผสม
        if (mixType === 'sum') {
            // สร้างชุดข้อมูลใหม่ที่เป็นผลรวมของทุกการ์ด
            const sumData = cards[0].data.labels.map((_, i) => {
                return cards.reduce((sum, card) => {
                    const value = card.data.datasets[0].data[i] || 0;
                    return sum + value;
                }, 0);
            });
            
            combinedData.datasets.push({
                label: 'ผลรวม',
                data: sumData,
                borderColor: 'rgba(75, 192, 192, 1)',
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderWidth: 2
            });
            
        } else if (mixType === 'avg') {
            // สร้างชุดข้อมูลใหม่ที่เป็นค่าเฉลี่ยของทุกการ์ด
            const avgData = cards[0].data.labels.map((_, i) => {
                const sum = cards.reduce((acc, card) => {
                    const value = card.data.datasets[0].data[i] || 0;
                    return acc + value;
                }, 0);
                return sum / cards.length;
            });
            
            combinedData.datasets.push({
                label: 'ค่าเฉลี่ย',
                data: avgData,
                borderColor: 'rgba(153, 102, 255, 1)',
                backgroundColor: 'rgba(153, 102, 255, 0.2)',
                borderWidth: 2
            });
            
        } else {
            // แสดงทุกชุดข้อมูลแยกกัน (เช่น การเปรียบเทียบ)
            cards.forEach((card, index) => {
                combinedData.datasets.push({
                    label: card.title,
                    data: card.data.datasets[0].data,
                    borderColor: this.getChartColor(index),
                    backgroundColor: this.getChartColor(index, 0.2),
                    borderWidth: 2
                });
            });
        }
        
        return combinedData;
        
    } else if (chartType === 'pie') {
        // สำหรับกราฟวงกลม
        // การผสมอาจเป็นการรวมข้อมูลหรือสร้างวงกลมที่แสดงสัดส่วน
        return {
            labels: cards.map(card => card.title),
            datasets: [{
                data: cards.map(card => 
                    card.data.datasets[0].data.reduce((a, b) => a + b, 0)
                ),
                backgroundColor: cards.map((_, i) => this.getChartColor(i)),
                borderWidth: 1
            }]
        };
    }
    
    // กรณีอื่นๆ
    return cards[0].data; // คืนค่าข้อมูลการ์ดแรกเป็นค่าเริ่มต้น
},

/**
 * สร้างการ์ดผสมในพื้นที่ทำงาน
 */
createMixedCard: function(cardInfo, x, y) {
    // สร้าง Element สำหรับการ์ดผสม
    const mixedCard = document.createElement('div');
    mixedCard.className = 'dashboard-card mixed-card';
    mixedCard.id = cardInfo.id;
    mixedCard.style.left = `${x}px`;
    mixedCard.style.top = `${y}px`;
    
    // สร้าง HTML ภายในการ์ด
    mixedCard.innerHTML = `
        <div class="card-header">
            <h3 class="card-title">${cardInfo.title.title}</h3>
            <div class="card-tools">
                <button class="card-tool card-tool-info" title="ข้อมูลการผสม"><i class="fas fa-info"></i></button>
                <button class="card-tool card-tool-unstack" title="แยกการ์ด"><i class="fas fa-unlink"></i></button>
                <button class="card-tool card-tool-close" title="ปิด"><i class="fas fa-times"></i></button>
            </div>
        </div>
        <div class="card-body">
            <div class="chart-container"><canvas id="chart-${cardInfo.id}"></canvas></div>
        </div>
        <div class="resize-handle"></div>
    `;
    
    // เพิ่มการ์ดลงในพื้นที่ทำงาน
    this.workspace.appendChild(mixedCard);
    
    // เพิ่มการ์ดลงในรายการ
    this.cards.push(cardInfo);
    
    // ทำให้การ์ดเลื่อนได้
    this.makeCardDraggable(mixedCard);
    
    // ทำให้การ์ดปรับขนาดได้
    this.makeCardResizable(mixedCard);
    
    // เพิ่ม event listeners สำหรับปุ่มบนการ์ด
    const closeBtn = mixedCard.querySelector('.card-tool-close');
    closeBtn.addEventListener('click', () => this.removeCard(cardInfo.id));
    
    const infoBtn = mixedCard.querySelector('.card-tool-info');
    infoBtn.addEventListener('click', () => this.showMixInfo(cardInfo.id));
    
    const unstackBtn = mixedCard.querySelector('.card-tool-unstack');
    unstackBtn.addEventListener('click', () => this.unstackCard(cardInfo.id));
    
    // สร้างกราฟ
    this.createMixedChart(cardInfo);
    
    // คืนค่าการ์ดที่สร้าง
    return mixedCard;
},

/**
 * แสดงข้อมูลการผสมการ์ด
 */
showMixInfo: function(cardId) {
    const card = this.cards.find(c => c.id === cardId);
    if (!card || !card.isMixed) return;
    
    // สร้าง content สำหรับ modal
    let content = `<h3>ข้อมูลการผสมการ์ด: ${card.title.title}</h3>`;
    content += `<p><strong>ประเภทการผสม:</strong> ${this.getMixTypeName(card.mixType)}</p>`;
    content += `<p><strong>สูตร:</strong> ${card.formula}</p>`;
    content += `<p><strong>ความลึกการผสม:</strong> ${card.mixDepth}</p>`;
    
    content += '<h4>การ์ดต้นทาง:</h4>';
    content += '<ul class="source-cards-list">';
    card.sourceCards.forEach(source => {
        content += `<li>${source.title} <small>(${source.id})</small></li>`;
    });
    content += '</ul>';
    
    // แสดง modal
    this.showModal('ข้อมูลการผสมการ์ด', content);
},

/**
 * แปลงชื่อประเภทการผสมเป็นภาษาไทย
 */
getMixTypeName: function(mixType) {
    const types = {
        'sum': 'ผลรวม',
        'avg': 'ค่าเฉลี่ย',
        'ratio': 'อัตราส่วน',
        'custom': 'กำหนดเอง'
    };
    return types[mixType] || mixType;
},

/**
 * แยกการ์ดที่ผสมแล้วกลับเป็นการ์ดต้นทาง
 */
unstackCard: function(cardId) {
    const card = this.cards.find(c => c.id === cardId);
    if (!card || !card.isMixed || !card.sourceCards) return;
    
    // ต้องการยืนยัน
    if (!confirm('ต้องการแยกการ์ดนี้กลับเป็นการ์ดต้นทางหรือไม่?')) return;
    
    // ตรวจสอบว่าการ์ดต้นทางยังอยู่หรือไม่
    const existingSourceCards = card.sourceCards.filter(source => 
        this.cards.some(c => c.id === source.id)
    );
    
    // ถ้ามีการ์ดต้นทางที่ยังอยู่
    if (existingSourceCards.length > 0) {
        // แสดงการ์ดต้นทางที่ยังอยู่
        existingSourceCards.forEach(source => {
            const sourceCard = document.getElementById(source.id);
            if (sourceCard) {
                sourceCard.style.opacity = '1';
                sourceCard.classList.remove('source-card');
            }
        });
    } else {
        // สร้างการ์ดต้นทางใหม่
        // โค้ดสร้างการ์ดจะขึ้นอยู่กับการเก็บข้อมูลในระบบของคุณ
        alert('การ์ดต้นทางได้ถูกลบไปแล้ว ไม่สามารถแยกการ์ดได้');
        return;
    }
    
    // ลบการ์ดผสม
    this.removeCard(cardId);
},

/**
 * สร้างกราฟสำหรับการ์ดผสม
 */
createMixedChart: function(cardInfo) {
    if (!cardInfo.chartType || !cardInfo.data) return;
    
    const chartId = `chart-${cardInfo.id}`;
    const chartElement = document.getElementById(chartId);
    
    if (!chartElement) return;
    
    // ลบกราฟเดิมถ้ามี
    if (cardInfo.chartInstance) {
        cardInfo.chartInstance.destroy();
    }
    
    // ตั้งค่า options สำหรับกราฟ
    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'top',
                labels: {
                    color: '#e0e0e0',
                    font: {
                        family: 'Prompt'
                    }
                }
            },
            tooltip: {
                mode: 'index',
                intersect: false,
                titleFont: {
                    family: 'Prompt'
                },
                bodyFont: {
                    family: 'Prompt'
                }
            }
        }
    };
    
    // เพิ่ม options เฉพาะสำหรับกราฟเส้นและกราฟแท่ง
    if (cardInfo.chartType === 'line' || cardInfo.chartType === 'bar') {
        chartOptions.scales = {
            x: {
                grid: {
                    color: 'rgba(255, 255, 255, 0.1)'
                },
                ticks: {
                    color: '#a0a0a0'
                }
            },
            y: {
                grid: {
                    color: 'rgba(255, 255, 255, 0.1)'
                },
                ticks: {
                    color: '#a0a0a0',
                    callback: function(value) {
                        return value.toLocaleString() + ' ฿';
                    }
                }
            }
        };
    }
    
    // สร้างกราฟ
    cardInfo.chartInstance = new Chart(chartElement, {
        type: cardInfo.chartType,
        data: cardInfo.data,
        options: chartOptions
    });
},
```

## 2. เพิ่มฟังก์ชันเรียกใช้การผสม

```javascript
// เพิ่มปุ่มผสมการ์ดใน contextMenu
document.getElementById('contextMenu').innerHTML += `
    <div class="context-menu-item" data-action="mix">ผสมการ์ด</div>
`;

// เพิ่ม event listener
document.querySelectorAll('.context-menu-item').forEach(item => {
    item.addEventListener('click', function() {
        const action = this.getAttribute('data-action');
        const cardId = document.getElementById('contextMenu').getAttribute('data-card-id');
        
        if (action === 'mix') {
            // เปิดโหมดเลือกการ์ดเพื่อผสม
            dashboardManager.startCardMixMode(cardId);
        }
        
        document.getElementById('contextMenu').style.display = 'none';
    });
});

// เพิ่มฟังก์ชันเริ่มโหมดผสมใน dashboardManager
startCardMixMode: function(sourceCardId) {
    this.mixMode = {
        active: true,
        selectedCards: [sourceCardId],
        sourceCard: sourceCardId
    };
    
    // แสดงแถบแจ้งเตือนว่าอยู่ในโหมดผสม
    this.showMixModeBar();
    
    // เปลี่ยนเคอร์เซอร์เป็นโหมดเลือก
    document.body.style.cursor = 'crosshair';
    
    // ไฮไลท์การ์ดที่เลือก
    document.getElementById(sourceCardId).classList.add('card-selected-for-mix');
    
    // เพิ่ม event listener ชั่วคราวสำหรับเลือกการ์ดเพิ่ม
    document.querySelectorAll('.dashboard-card').forEach(card => {
        card.addEventListener('click', this.handleCardSelectForMix);
    });
},

// จัดการคลิกเลือกการ์ด
handleCardSelectForMix: function(e) {
    e.stopPropagation();
    const cardId = this.id;
    
    // ถ้าการ์ดนี้เลือกไว้แล้ว ให้ยกเลิกการเลือก
    if (dashboardManager.mixMode.selectedCards.includes(cardId)) {
        dashboardManager.mixMode.selectedCards = 
            dashboardManager.mixMode.selectedCards.filter(id => id !== cardId);
        this.classList.remove('card-selected-for-mix');
    } else {
        // เลือกการ์ดเพิ่ม
        dashboardManager.mixMode.selectedCards.push(cardId);
        this.classList.add('card-selected-for-mix');
    }
    
    // อัพเดตแถบแจ้งเตือน
    dashboardManager.updateMixModeBar();
},

// แสดงแถบแจ้งเตือนโหมดผสม
showMixModeBar: function() {
    // สร้างแถบแจ้งเตือนถ้ายังไม่มี
    if (!document.getElementById('mixModeBar')) {
        const mixBar = document.createElement('div');
        mixBar.id = 'mixModeBar';
        mixBar.className = 'mix-mode-bar';
        mixBar.innerHTML = `
            <div class="mix-mode-info">โหมดผสมการ์ด: เลือกการ์ด <span id="mixSelectedCount">1</span> การ์ด</div>
            <div class="mix-mode-actions">
                <button id="mixCardsBtn" class="btn btn-primary">ผสมการ์ด</button>
                <button id="cancelMixBtn" class="btn btn-outline">ยกเลิก</button>
            </div>
        `;
        document.body.appendChild(mixBar);
        
        // เพิ่ม event listeners
        document.getElementById('mixCardsBtn').addEventListener('click', () => {
            this.showMixOptionsModal();
        });
        
        document.getElementById('cancelMixBtn').addEventListener('click', () => {
            this.cancelMixMode();
        });
    }
    
    // แสดงแถบ
    document.getElementById('mixModeBar').style.display = 'flex';
},

// อัพเดตแถบแจ้งเตือน
updateMixModeBar: function() {
    const count = document.getElementById('mixSelectedCount');
    if (count) {
        count.textContent = this.mixMode.selectedCards.length;
    }
    
    // ปิดปุ่มผสมถ้าเลือกน้อยกว่า 2 การ์ด
    const mixBtn = document.getElementById('mixCardsBtn');
    if (mixBtn) {
        mixBtn.disabled = this.mixMode.selectedCards.length < 2;
    }
},

// ยกเลิกโหมดผสม
cancelMixMode: function() {
    // ลบคลาสที่ไฮไลท์การ์ดที่เลือก
    this.mixMode.selectedCards.forEach(cardId => {
        const card = document.getElementById(cardId);
        if (card) {
            card.classList.remove('card-selected-for-mix');
        }
    });
    
    // ลบ event listener ชั่วคราว
    document.querySelectorAll('.dashboard-card').forEach(card => {
        card.removeEventListener('click', this.handleCardSelectForMix);
    });
    
    // คืนค่าเคอร์เซอร์
    document.body.style.cursor = '';
    
    // ซ่อนแถบแจ้งเตือน
    const mixBar = document.getElementById('mixModeBar');
    if (mixBar) {
        mixBar.style.display = 'none';
    }
    
    // รีเซ็ตสถานะ
    this.mixMode = {
        active: false,
        selectedCards: [],
        sourceCard: null
    };
},

// แสดง Modal ตัวเลือกการผสม
showMixOptionsModal: function() {
    // สร้าง content สำหรับ modal
    let content = `
        <h3>เลือกวิธีผสมการ์ด</h3>
        <div class="mix-options">
            <div class="form-group">
                <label>รูปแบบการผสม:</label>
                <select id="mixTypeSelect" class="form-control">
                    <option value="sum">ผลรวม</option>
                    <option value="avg">ค่าเฉลี่ย</option>
                    <option value="ratio">อัตราส่วน</option>
                    <option value="custom">กำหนดเอง</option>
                </select>
            </div>
            
            <div class="form-group mix-custom-options" style="display: none;">
                <label>ชื่อการ์ดผสม:</label>
                <input type="text" id="mixCustomTitle" class="form-control" placeholder="ชื่อการ์ดผสม">
            </div>
            
            <div class="form-group mix-custom-options" style="display: none;">
                <label>สูตรกำหนดเอง:</label>
                <textarea id="mixCustomFormula" class="form-control" rows="3" placeholder="สูตรคำนวณ"></textarea>
            </div>
            
            <div class="form-group">
                <label>การ์ดต้นทาง:</label>
                <div class="radio-group">
                    <label><input type="radio" name="sourceCardAction" value="keep" checked> คงไว้</label>
                    <label><input type="radio" name="sourceCardAction" value="hide"> ซ่อน</label>
                    <label><input type="radio" name="sourceCardAction" value="remove"> ลบ</label>
                </div>
            </div>
        </div>
    `;
    
    // แสดง modal
    this.showModal('ตัวเลือกการผสมการ์ด', content, () => {
        // Event listener สำหรับเปลี่ยนประเภทการผสม
        document.getElementById('mixTypeSelect').addEventListener('change', function() {
            const customOptions = document.querySelectorAll('.mix-custom-options');
            if (this.value === 'custom') {
                customOptions.forEach(el => el.style.display = 'block');
            } else {
                customOptions.forEach(el => el.style.display = 'none');
            }
        });
        
        // เพิ่มปุ่มยืนยันและยกเลิก
        const footerButtons = `
            <button id="cancelMixOptions" class="btn btn-outline">ยกเลิก</button>
            <button id="confirmMixOptions" class="btn btn-primary">ผสมการ์ด</button>
        `;
        document.querySelector('.modal-footer').innerHTML = footerButtons;
        
        // เพิ่ม event listeners สำหรับปุ่ม
        document.getElementById('cancelMixOptions').addEventListener('click', () => {
            this.closeModal();
        });
        
        document.getElementById('confirmMixOptions').addEventListener('click', () => {
            const mixType = document.getElementById('mixTypeSelect').value;
            const sourceAction = document.querySelector('input[name="sourceCardAction"]:checked').value;
            
            const customSettings = {
                removeOriginals: sourceAction === 'remove',
                hideOriginals: sourceAction === 'hide'
            };
            
            if (mixType === 'custom') {
                customSettings.title = document.getElementById('mixCustomTitle').value;
                customSettings.formula = document.getElementById('mixCustomFormula').value;
            }
            
            // ผสมการ์ด
            this.mixCards(this.mixMode.selectedCards, mixType, customSettings);
            
            // ปิด modal
            this.closeModal();
            
            // ยกเลิกโหมดผสม
            this.cancelMixMode();
        });
    });
},
```

## 3. เพิ่ม CSS สำหรับโหมดผสมและการ์ดผสม

```css
/* เพิ่มในส่วน <style> ของหน้า */

/* การ์ดที่ถูกเลือกสำหรับผสม */
.card-selected-for-mix {
    box-shadow: 0 0 0 3px var(--accent-primary), var(--card-shadow);
    transform: scale(1.02);
    z-index: 100;
}

/* แถบแจ้งเตือนโหมดผสม */
.mix-mode-bar {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: var(--bg-card);
    border: 1px solid var(--accent-primary);
    border-radius: 12px;
    padding: 10px 20px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 20px;
    box-shadow: var(--card-shadow);
    z-index: 1500;
}

.mix-mode-info {
    font-weight: 500;
    color: var(--accent-primary);
}

.mix-mode-actions {
    display: flex;
    gap: 10px;
}

/* การ์ดผสม */
.mixed-card {
    border: 1px solid var(--accent-primary);
    background: linear-gradient(135deg, var(--bg-card), rgba(107, 138, 253, 0.1));
}

.mixed-card .card-header {
    background: linear-gradient(45deg, rgba(107, 138, 253, 0.6), rgba(156, 95, 255, 0.6));
}

/* Modal ตัวเลือกการผสม */
.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    color: var(--text-primary);
}

.form-control {
    width: 100%;
    padding: 8px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid var(--border-light);
    border-radius: 6px;
    color: var(--text-primary);
}

.radio-group {
    display: flex;
    gap: 15px;
}

.radio-group label {
    display: flex;
    align-items: center;
    gap: 5px;
    cursor: pointer;
}

/* การ์ดต้นทาง (ถ้าถูกซ่อน) */
.source-card {
    opacity: 0.5;
    border: 1px dashed var(--border-light);
}

/* เมนูการผสม */
.mix-menu {
    display: flex;
    flex-direction: column;
    gap: 10px;
    padding: 10px;
    background: var(--bg-secondary);
    border-radius: 8px;
    border: 1px solid var(--border-light);
}

.mix-menu-item {
    padding: 8px 12px;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.mix-menu-item:hover {
    background: rgba(107, 138, 253, 0.1);
}
```

## 4. การนำไปใช้

สำหรับการนำไปใช้ คุณสามารถเพิ่มโค้ดดังกล่าวเข้าไปในไฟล์ ANNEW_4.html หรือไฟล์ JavaScript แยกก็ได้ แล้วนำเข้าในหน้าเว็บของคุณ:

```html
<!-- เพิ่ม CSS ที่จำเป็น -->
<style>
    /* โค้ด CSS จากส่วนที่ 3 */
</style>

<!-- เพิ่ม Script ต่อจาก dashboardManager เดิม -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // โค้ดเดิม...
        
        // เพิ่มฟังก์ชันผสมการ์ดใน dashboardManager
        Object.assign(dashboardManager, {
            // โค้ดฟังก์ชันผสมการ์ดจากส่วนที่ 1
            mixCards: function(selectedCardIds, mixType, customSettings) { /* ... */ },
            // ฟังก์ชันอื่นๆ...
        });
        
        // เพิ่ม event listener และฟังก์ชันจากส่วนที่ 2
        // ...
    });
</script>
```

การตั้งชื่อแบบอัตโนมัติตามหลัก prefix_action_object ช่วยให้ระบบของคุณเข้าใจความหมายและพฤติกรรมของการ์ดผสม โดยคุณสามารถปรับแต่งส่วนการสร้างชื่อในฟังก์ชัน generateMixedCardTitle() ให้เข้ากับกฎการตั้งชื่อเฉพาะของคุณได้

อีกทั้ง ระบบยังรองรับการเก็บประวัติและการติดตามความสัมพันธ์ของการ์ดผ่านคุณสมบัติ sourceCards และ mixDepth ซึ่งช่วยในการจัดการและการแสดงความสัมพันธ์ของข้อมูล

<11>
