<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Dark-Theme Pixel Grid Prototype</title>
  <style>
    /* DARK THEME RESET */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    html, body {
      height: 100%;
      font-family: sans-serif;
      background: #111;
      color: #ddd;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 1rem;
    }
    h1 {
      margin-bottom: 1rem;
      font-size: 1.2rem;
      letter-spacing: .05em;
    }
    #controls {
      margin-bottom: 0.5rem;
    }
    button {
      background: #222;
      color: #ddd;
      border: 1px solid #444;
      padding: 0.4rem 0.8rem;
      margin-right: 0.5rem;
      cursor: pointer;
      border-radius: 3px;
      font-size: 0.9rem;
    }
    button:hover {
      background: #333;
    }
    /* GRID STYLES */
    #grid {
      display: grid;
      /* will be set dynamically via JS based on cols count */
      grid-gap: 2px;
      touch-action: none;
    }
    .cell {
      width: 1.6vw;
      height: 1.6vw;
      max-width: 24px;
      max-height: 24px;
      min-width: 12px;
      min-height: 12px;
      background: #222;
      border-radius: 2px;
      cursor: pointer;
      transition: background 0.15s;
    }
    .cell.active {
      background: #0f8;
    }
    @media (max-width: 500px) {
      /* on small screens, make cells a bit larger for touch */
      .cell {
        min-width: 16px;
        min-height: 16px;
        max-width: 32px;
        max-height: 32px;
      }
    }
    footer {
      margin-top: 1rem;
      font-size: 0.8rem;
      color: #555;
    }
  </style>
</head>
<body>
  <h1>Pixel Grid Prototype</h1>
  <div id="controls">
    <button id="clearBtn">Clear</button>
    <button id="invertBtn">Invert</button>
  </div>
  <div id="grid"></div>
  <footer>Click cells to toggle; responsive & dark-theme</footer>

  <script>
    (function() {
      // Your 17Ã—25 pattern as an array of strings (0=off, 1=on).
      // Each row here is exactly 25 chars, spaces removed from your source.
      const pattern = [
        "0000000000000000000000000",
        "0000000000000000000000000",
        "0011111111100000000000000",
        "0010001000000000000000000",
        "0010001000000000000000000",
        "0010001000000000000000000",
        "0010001000000000000000000",
        "0011111111100000000000000",
        "0010001000000000000000000",
        "0010001000000000000000000",
        "0010001000000000000000000",
        "0010001000000000000000000",
        "0010001000000000000000000",
        "0011111111100000000000000",
        "0000000000000000000000000",
        "0000000000000000000000000",
        "0000000000000000000000000"
      ];

      const rows = pattern.length;
      const cols = pattern[0].length;

      const gridEl = document.getElementById("grid");
      // set grid columns dynamically
      gridEl.style.gridTemplateColumns = `repeat(${cols}, auto)`;

      // build cells
      const cells = [];
      for (let r = 0; r < rows; r++) {
        for (let c = 0; c < cols; c++) {
          const div = document.createElement("div");
          div.classList.add("cell");
          if (pattern[r][c] === "1") div.classList.add("active");
          // store row/col
          div.dataset.r = r;
          div.dataset.c = c;
          gridEl.appendChild(div);
          cells.push(div);
        }
      }

      // toggle on click
      gridEl.addEventListener("click", e => {
        if (!e.target.classList.contains("cell")) return;
        e.target.classList.toggle("active");
      });

      // clear button
      document.getElementById("clearBtn").onclick = () => {
        cells.forEach(c => c.classList.remove("active"));
      };
      // invert button
      document.getElementById("invertBtn").onclick = () => {
        cells.forEach(c => c.classList.toggle("active"));
      };
    })();
  </script>
</body>
</html>