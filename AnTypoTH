หลักจำแนกอักษร

พยัญชนะ

ตัวสะกด

ตัวที่ทำหน้าที่อื่นได้เช่นสระ, ควบ, วรรณยุกต์

จำแนกสระ

ตำแหน่ง หน้า บน ล่าง หลัง

แบบรวมกลุ่ม

จำแนกคำเฉพาะ ที่เหลือเป็นเครื่องหมาย การตรวจอาจไม่ต้องตรวยรายคำ ควรตรวจทั้งพารากราฟ และระบุ logic น่าจะเร็วกว่า
แล้วสร้าง rule ที่กล่าวถึงการมีแพทเทิร์นที่มีกฏต่างๆเช่น ไม่มีตัวใดปรากฏเดี่ยว อักษรพยัญชนะจะไม่มีมากกว่า 1 ตัวติดกันเว้นแต่ว่าจะเป็นคำที่ต่างกันเขียนติดกันตามปกติ ไม่อย่างนั้นจะต้องทำหน้าที่สะกดหรือสระได้ เช่น สวรรค์ = สะ-หวัน , รรรรรร = ระ- รัน- รอน, พชร = พัช-ชะ-ระ หรือ พะ-ชอน หรือ พะ-ชะ-ระ หรือ พัช-ระ แต่คำพวกนี้มันไม่เขียนแยกเป็นคำเสียงเดี่ยวกัน

การจำแนกอักษรและสระในภาษาไทย

1. การจำแนกพยัญชนะ

พยัญชนะต้น:

ใช้เริ่มต้นคำ เช่น ก, ข, ค

มีหน้าที่เปิดคำหรือเริ่มพยางค์

ข้อสังเกต:

พยัญชนะต้นจะไม่ปรากฏเดี่ยวโดยไม่มีสระประกอบ (ยกเว้นคำเฉพาะ เช่น "กร", "พร")

ตัวสะกด:

พยัญชนะที่ใช้ปิดคำ เช่น น, ม, ร, ล, ง

ทำหน้าที่ปิดเสียงพยางค์ เช่น "กน", "กล"

พยัญชนะที่มีหน้าที่อื่น (พิเศษ):

"ร": ทำหน้าที่ควบกล้ำ, ตัวสะกด เช่น "กร", "กระ"

"ล": ทำหน้าที่ควบกล้ำ, ตัวสะกด เช่น "กล้า", "ผล"

"ห": ใช้แทนเสียงวรรณยุกต์เสียงสูง เช่น "หมา" → ม๋า

"อ": ทำหน้าที่เป็นพยัญชนะ, สระ, หรือปิดเสียง เช่น "กอ", "อร่อย"

"ย": ใช้เป็นตัวสะกดหรือส่วนประกอบของสระ เช่น "ไทย", "เมีย"

"ว": ทำหน้าที่ตัวควบกล้ำ, ตัวสะกด เช่น "พราว", "วัว"

2. การจำแนกสระ

สระแบ่งตามตำแหน่ง:

สระหน้า: เช่น "เ", "แ"

สระบน: เช่น "ิ", "ี"

สระล่าง: เช่น "ุ", "ู"

สระหลัง: เช่น "ะ", "า", "อ"

สระแบบรวมกลุ่ม:

สระเดี่ยว: "อะ", "อา", "อิ", "อี"

สระประสม: "เอีย", "เอือ", "อัว"

สระเสียงสั้น: "อะ", "เอะ"

สระเสียงยาว: "อา", "เอ"

3. การจำแนกคำเฉพาะ

คำที่มีรูปแบบเฉพาะ (คำโบราณ/คำยืม):

เช่น "สวรรค์", "พชร", "เคราะห์"

ต้องตรวจสอบผ่านพจนานุกรมหรือบริบท

คำที่เขียนติดกันตามปกติ:

เช่น "รรรรร" → แยกเป็น "ระ-รัน-รอน"

ใช้การตรวจสอบโครงสร้างและเสียงในคำ

คำที่ไม่เขียนแยกพยางค์เดี่ยว:

เช่น "พชร" → ไม่แยกเป็น "พะ-ชอน" แต่ต้องมีรูปแบบที่เหมาะสม เช่น "พัช-ชะ-ระ"

Logic สำหรับตรวจสอบพารากราฟ

โครงสร้างพื้นฐานของคำ:

พยัญชนะ + สระ (หน้า/บน/ล่าง/หลัง) + ตัวสะกด

ตัวสะกดไม่มีมากกว่า 1 ตัวต่อคำ

พยัญชนะไม่ซ้อนกันเกิน 2 ตัว เว้นแต่จะเป็นคำควบหรือคำเฉพาะ

ลำดับการปรากฏ:

ไม่มีตัวใด (เช่น พยัญชนะหรือสระ) ปรากฏเดี่ยว

สระต้องปรากฏในตำแหน่งที่เหมาะสม:

สระหน้าอยู่ต้นคำ

สระบนและล่างอยู่ถัดจากพยัญชนะ

สระหลังปิดท้ายคำ

การจัดกลุ่มคำ:

คำที่เขียนติดกันต้องแยกคำอย่างเหมาะสม เช่น:

"สวรรค์" → "สะ-หวัน"

"พชร" → "พัช-ระ"

การตรวจสอบเสียง:

ใช้การตรวจสอบเสียงควบกล้ำและวรรณยุกต์เพื่อประเมินความสมเหตุสมผล

กฎและแพทเทิร์นพื้นฐาน

พยัญชนะเดี่ยว เช่น ก, ร, ม สามารถเป็นคำได้ในบางกรณี แต่จะต้องไม่ใช่การซ้อนพยัญชนะแบบ Consonants = 'Consonants' และมักจะต้องมีสระหรือสะกดเพื่อเติมเต็มความหมาย เช่น 'กร', 'มร', 'ทร' ที่ควรมีการกำหนดว่าเป็น Consonants + spellings หรือ Consonants + vowels.

พยัญชนะไม่ซ้อนกันเกิน 3 ตัวในคำเดียว:

พยัญชนะไม่ซ้ำกันอักษรเดียวเกินกว่า 2 ตัว เช่น "กกก" "บบบ"

เว้นแต่จะเป็นคำเฉพาะ เช่น "สวรรค์"

ตัวสะกดต้องเป็นพยัญชนะที่รองรับในภาษาไทย:

เช่น "น, ม, ร, ล, ง"

การแยกคำ:

หากพยัญชนะหลายตัวเขียนติดกัน เช่น "รรรรร" ให้ใช้โครงสร้างคำและเสียงช่วยแยกคำ

Rule-Based Tokenization

การตัดคำ:

ตรวจสอบคำที่มีพยัญชนะ สระ และตัวสะกดตามลำดับที่ถูกต้อง

หากพบคำที่ไม่ตรงกับรูปแบบ ให้แยกและวิเคราะห์คำตามเสียงหรือพจนานุกรม

การตรวจสอบพารากราฟ:

ใช้กฎโครงสร้างคำพื้นฐานร่วมกับการตรวจสอบคำเฉพาะ

ตรวจสอบคำที่มีพยัญชนะหลายตัวติดกัน โดยใช้ Logic การแยกคำ

สรุป

พยัญชนะ: แยกเป็นพยัญชนะต้น, ตัวสะกด, และตัวที่ทำหน้าที่อื่นได้

สระ: จำแนกตามตำแหน่งและแบบรวมกลุ่ม

คำเฉพาะ: ใช้บริบทและพจนานุกรมเพื่อตรวจสอบ

การสร้าง Rule และ Pattern ช่วยให้สามารถตรวจสอบคำทั้งพารากราฟได้รวดเร็วและแม่นยำ







# กำหนดกลุ่มตัวอักษรไทยพื้นฐาน

consonants = "[ก-ฮ]"  # พยัญชนะ

ending_consonants = "[ก-ฮ]" # ตัวสะกด ยกเว้น ค ฉ ผ ฝ ฌ ห ฮ

leading_vowels = "[เแโใไ]"  # สระหน้า

top_vowels = "[ิีึื]"  # สระบน เพิ่ม ก็

bottom_vowels = "[ุู]"  # สระล่าง

following_vowels = "[วยอาะ]"  # สระท้าย

tone_marks = "[่้๊๋]"  # วรรณยุกต์

S = [ร ล ว ย อ ห] # อักษรพิเศษ


+++++++++++++++++++++++++++++
# Rule สำหรับคำไทยที่ถูกต้อง logic


word = if consonants and/or S and bottom_vowels and/or tone_maker and/or ending_consonants

       elsif leading_vowels and/or consonants and/or S and/or top_vowels and/or tone_marks  

             and/or following_vowels (if 'ะ' : ending) and/or ending_consonants

       elsif consonants and/or S and/or ending_consonants
+++++++++++++++++++++++++++++++++++++++


def process_text(input_text):

    output_text = ""

    prev_char_type = None



    for char in input_text:

        current_char_type = get_char_type(char)



        # กฎ 1: เพิ่มช่องว่างหน้าหลังอักขระที่กำหนด

        if char in ['"', "'", '[', ']', '{', '}', '(', ')', '+', '-', '*', '/', '=', '%']:

            output_text += f" {char} "

        # กฎ 2: กรณีเครื่องหมาย !, ?, ๆ ติดตัวอักษรไทยหรือตัวเลข

        elif char in ['!', '?', 'ๆ']:

            output_text += char

        # กฎ 3: เว้นช่องว่างเมื่อประเภทอักขระเปลี่ยน

        elif prev_char_type and current_char_type != prev_char_type:

            output_text += f" {char}"

        else:

            output_text += char

        

        prev_char_type = current_char_type



    # กฎ 4: ลบคำลงท้าย (ending words)

    output_text = remove_endings(output_text)



    return output_text

+++++++++++++++++++++++++++++++++++++++++++



def get_char_type(char):

    if char.isalpha():

        return "alphabet"

    elif char.isdigit():

        return "digit"

    elif char in ['"', "'", '[', ']', '{', '}', '(', ')', '+', '-', '*', '/', '=', '%']:

        return "punctuation_math"

    elif char in ['!', '?', 'ๆ']:

        return "punctuation_emphasis"

    else:

        return "other"

++++++++++++++++++++++++++++



def remove_endings(text):

    ending_words = ["ครับ", "ค่ะ", "คร๊าบ", "คับ", "เหมียว"]

    words = text.split()

    filtered_words = [word for word in words if word not in ending_words]

    return " ".join(filtered_words)





